# *************************************************************************************
# Makefile.help
# Questa Makefile Environment
# 
# Copyright 2014 Mentor Graphics Corporation
# All Rights Reserved
#
# THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION WHICH IS THE PROPERTY OF
# MENTOR GRAPHICS CORPORATION OR ITS LICENSORS AND IS SUBJECT TO LICENSE TERMS
#
# bugs, enhancment requests to: Mikael_Andersson@mentor.com
# *************************************************************************************

# This file contains the help text
default::header
help::header 

help_all::header help_override help_filelists help_compile help_simulate help_setups help_regression

header:
	@tput setaf 4;
	@echo "########################## Questa Makefile Environment (QME) ############################################"
	@echo "# Version: ${QME_VERSION} located at ${QME_HOME}"
	@echo "#"
	@echo "# This environment is developed by Mikael Andersson, Mentor Graphics"
	@echo "# contact email: Mikael_Andersson@mentor.com"
	@echo "# Documentation can be found at: http://www.github.com/detstorabla/qme"
	@echo "#"
	@echo "### Available subjects are: ###"
	@echo "#   * make help_all"
	@echo "#   * make help_override"
	@echo "#   * make help_filelists"
	@echo "#   * make help_compile"
	@echo "#   * make help_simulate"
	@echo "#   * make help_regression"
	@echo "#   * make help_tutorial"
	@echo "#   * make help_qvip"
	@echo "#   * make help_infact"
	@echo "#   * make help_adding_targets"
	@echo "#   * make help_setups"
	@echo "#   * make help_autocheck"
	@echo "#   * make help_covercheck"


	@tput setaf 9;


help_override::
	@tput setaf 4;
	@echo "########################## OVERRIDING PARAMETERS ########################################################"
	@echo "# Any parameter in the Makefile can be overridden in the following ways:"
	@echo "# 1. Override on command line: make compile SEED=1234 (Override the param SEED with 1234)"
	@echo "# 2. Add an override just for your block in ${BLOCK_OVERRIDES}:"
	@echo "#    # enable 64 bit mode:"
	@echo "#    ARCH=64"
	@echo "# 3. Add an override for your project in ${QME_PROJECT_HOME}/qme_setup/Makefile.project.defaults:"
	@echo "#    # We don't use verification plans by default:"
	@echo "#    REQUIRE_VPLAN=0"
	@echo "# 4. Add an override for your site in ${QME_SITE_SETTINGS}/Makefile.site.defaults:"
	@echo "#    # We don't use verification plans by default:"
	@echo "#    REQUIRE_VPLAN=0"
	@echo "#"
	@echo "# To find out what variables you can override, you can:"
	@echo "#    a. Look in the Makefile in your simulation directory"
	@echo "#    b. \"make info\" will list all variables and relations (in alphabetical order) "
	@echo "#    c. \"make print-<variable name> will print value. Example; make print-BLOCK_OVERRIDES"
	@echo "#"
	@echo "# Most commonly used overrides are mentioned in each help section"
	@echo "# Below the general overrides that affects all step are listed"
	@echo "# ARCH=32/64 (Current value ${ARCH}) 32 or 64 bit mode "
	@tput setaf 9;


help_compile::
	@tput setaf 4;
	@echo "########################## COMPILATION ##################################################################"
	@echo "# Provided that you created filelists according to 'make help_filelists' ...."
	@echo "# To compile everything:                                       make compile"
	@echo "# To compile only the test bench (no opt):                     make compile_tb"
	@echo "# To compile dut (no opt):                                     make compile_rtl"
	@echo "# To optimize (opt) all code:                                  make opt"
	@echo "# "
	@echo "### Compilation Overrides: ###"
	@echo "# SETUP=<setup> 				will compile the code with <setup> defined"
	@echo "# RECOMPILE_UVM=1 (${RECOMPILE_UVM}		Recompile UVM with actual timescale used"
	@echo "# EXTRA_VLOG_ARGS=<>			If you want to add an extra vlog argument to all files"
	@echo "# EXTRA_VCOM_ARGS=<>			If you want to add an extra vcom argument to all files"
	@echo "# DUT_FILELIST=<path> (${DUT_FILELIST})	If you want to use a different filelist"
	@echo "# TB_FILELIST=<path>  (${TB_FILELIST})	If you want to use a different filelist"
	@echo "# "
	@echo "### Some Examples: ###"
	@echo "# mybsub make compile"
	@echo "# mybsub make compile SETUP=SETUP_DL"
	@echo "# mybsub make compile SETUP=SETUP_DL ARCH=64 (run in 64 bit mode)"
	@echo "# mybsub make recompile (reuses previous setup)"
	@echo "# mybsub make compile_tb SETUP=SETUP_DL"
	@echo "# mybsub make compile_tb SETUP=SETUP_DL"
	@echo "#"
	@tput setaf 9;


help_simulate::
	@tput setaf 4;
	@echo "########################## SIMULATION ###################################################################"
	@echo "# To start simulation in GUI mode (Block level simulation):    make gui TEST=my_test_name "
	@echo "# To start simulation in GUI mode in chip mode (3-step flow):  make gui TEST=my_test_name VERIFICATION_LEVEL=CHIP"
	@echo "#"
	@echo "# To start simulation in batch mode (2-step opt flow):         make batch TEST=my_test_name "
	@echo "# To start simulation in GUI mode in chip mode (3-step flow):  make batch TEST=my_test_name VERIFICATION_LEVEL=CHIP"
	@echo "#"
	@echo "### Simulation Overrides: ###"
	@echo "# TEST=<testname>						(${TEST})	required to select test"
	@echo "# DEBUG_LEVEL=LOW|MEDIUM|FULL 					(${DEBUG_LEVEL})		Debug level (affects performance):"
	@echo "# UVM_VERBOSITY=UVM_MEDIUM|UVM_NONE|UVM_HIGH|UVM_DEFAULT 	(${UVM_VERBOSITY}) 		UVM verbositity"
	@echo "# VERIFICATION_LEVEL=BLOCK/CHIP  				(${VERIFICATION_LEVEL})			Enable chip level flow (faster) "
	@echo "# EXTRA_VSIM_ARGS=<>									If you want to add something extra to vsim"
	@echo "# EXTRA_VOPT_ARGS=<>									If you want to add some extra vopt argument"

	@echo "#"
	@echo "### Some Examples: ###"
	@echo "#        make gui TEST=my_test"
	@echo "#        make gui TEST=my_test FAST=1 UVM_VERBOSITY=UVM_NONE"
	@echo "#        make gui TEST=my_test DEBUG_LEVEL=FULL UVM_VERBOSITY=UVM_HIGH"
	@echo "#        make gui TEST=my_test VERIFICATION_LEVEL=CHIP"
	@echo "#        make compile gui TEST=my_test"
	@echo "#"
	@tput setaf 9;


help_regression::
	@tput setaf 4;
	@echo "########################## Running Regressions #########################################"
	@echo "# QME is set up to assist you with running regressions. To be able to run regressions,"
	@echo "# the following prerequisites apply:"
	@echo "#"
	@echo "# * tc_spec.txt (${TC_SPEC}) must exist:  "
	@echo "#   This file contains information about verification plan and which tests that should be"
	@echo "#   run. E.g."
	@echo "#   a. Define where your XML verification plan is located: "
	@echo "#      <SETUP>:VPLAN_XML=<path to file"
	@echo "#   b. Define which tests should be run and how many times and seeds: "
	@echo "#      <SETUP> <testname> <no of simulations> <list of seeds>"
	@echo "#      DEFAULT my_test1 100 random"
	@echo "#      DEFAULT my_test2 100 1124566 -22423423234 random"
	@echo "#      (The last lines means that two of the simulations have specified seeds, the rest random"
	@echo "# * You do need a UVM testbench built according to the regressions"
	@echo "#"
	@echo "# To launch the regression from GUI"
	@echo "# make regression"
	@echo "# Select the \"VRM Cockpit\" tab and highlight $BLOCKNAME_regression, RMP and select \"run\" or \"run special\""
	@echo "# The latter allows you to use the gui to select and modify stuff before starting the regression"
	@echo "#"
	@echo "# To launch the regression in \"batchmode\""
	@echo "# make regression AUTOSTART=1"
	@echo "#"
	@echo "# To view the current status on an existing regression:"
	@echo "# make regression_status"
	@echo "#"
	@echo "# To kill the current regression and all existing jobs"
	@echo "# make regression_kill"
	@echo "#"
	@echo "# To enable automatic rerun of failing simulations CHECK!"
	@echo "#"
	@echo "#"
	@echo "#"
	@echo "#"
	@echo "#"
	@echo "#"
	@echo "#"
	@echo "#"
	@echo "#"

	@tput setaf 9;






help_qvip::
	@tput setaf 4;
	@echo "########################## SETTING UP QUESTA VIP #########################################"
	@echo "# It is extremly easy to start using the QUESTA VIP in QME. "
	@echo "#"
	@echo "# First of all. You need to specify which vips that should be compiled."
	@echo "# This is done by adding an override in your Makefile.block.overrides file (${BLOCK_OVERRIDES})"
	@echo "# Example: You need i2c and apb3, add the following line:"
	@echo "# QVIP_TARGETS=i2c apb3"
	@echo "#"
	@echo "#To test it, do make compile_qvips"
	@echo "#"
	@echo "# Next step is to read the documentation and see the examples at ${QUESTA_MVC_HOME}"
	@echo "#"
	@echo "#"
	@echo "#"
	@echo "#"

	@tput setaf 9;

help_setups::
	@tput setaf 4;
	@echo "########################## THE SETUP CONCEPT ######################"
	@echo "# One design can turn into something different depending on"
	@echo "# design parameters/generics"
	@echo "# The only safe way to handle this is to handle each set of "
	@echo "# parameters/generics as a separate design and still reuse "
	@echo "# the testbench"
	@echo "# Example:"
	@echo "#	 module my_dut #(parameter no_of_channels=1,downlink=1)(....);"
	@echo "#           ...."
	@echo "#         endmodule"
	@echo "#"
	@echo "# With this project we are going to use my_dut with different parameters."
	@echo "# So we add the following code in our <block>_tb_pkg.sv:"
	@echo "# \`ifdef SETUP_DL_8"
	@echo "#    parameter NO_OF_CHANNELS=8;"
	@echo "#    parameter DOWNLINK=1;"
	@echo "# \`elseif SETUP_UL_8"
	@echo "#    parameter NO_OF_CHANNELS=8;"
	@echo "#    parameter DOWNLINK=0;"
	@echo "# \`elseif SETUP_UL_16"
	@echo "#    parameter NO_OF_CHANNELS=16;"
	@echo "#    parameter DOWNLINK=1;"
	@echo "# \`elseif SETUP_UL_16"
	@echo "#    parameter NO_OF_CHANNELS=16;"
	@echo "#    parameter DOWNLINK=1;"
	@echo "# \`else // Default"
	@echo "#    parameter NO_OF_CHANNELS=1;"
	@echo "#    parameter DOWNLINK=1;"
	@echo "# \`endif"
	@echo "#"
	@echo "# Now if we want to compile and simulate a specific setup we do:"
	@echo "# make compile SETUP=SETUP_DL_8"
	@echo "# make gui TEST=my_test"
	@echo "#"
	@echo "# In tc_spec.txt (${TC_SPEC}) we define "
	@echo "#<SETUP> <TESTNAME> <No of runs> <list of seeds>"
	@echo "# See more in "
	@echo "# make help_regression"
	@tput setaf 9;


help_filelist::help_filelists

help_filelists::
	@tput setaf 4;
	@echo "########################## FILELISTS ########################"
	@echo "# QME utilizes two filelists. One for rtl and one for testbench"
	@echo "# The rtl filelist is located at ${DUT_FILELIST}"
	@echo "# and the testbench filelist is located at ${TB_FILELIST}"
	@echo "#"
	@echo "# QME allowes you to automatically translate your own filelist format"
	@echo "# to the very simple filelist format that QME uses."
	@echo "# This is done by providing an implementation of the target precompile_tb and"
	@echo "# precompile_rtl in the ${QME_SITE_SETTINGS}/Makefile.site.defaults"
	@echo "# E.g."
	@echo "# precompile_rtl::"
	@echo "# 	<script to generate QME filelist for rtl>"
	@echo "# "
	@echo "# precompile_tb::"
	@echo "# 	<script to generate QME filelist for rtl>"
	@echo "# "
	@echo "# "
	@echo "# QME Filelist format"
	@echo "# @library <library_name>           # This tells us what library the following files should be compiled to"
	@echo "# <filename>:<options>		   # Filename to be compiled"
	@echo "# "
	@echo "# Example:"
	@echo "# @library fpu_lib"
	@echo "# ${QME_HOME}/examples/fpu/rtl/vhdl/fpupack.vhd"
	@echo "# ${QME_HOME}/examples/fpu//rtl/vhdl/comppack.vhd"
	@echo "# ${QME_HOME}/examples/fpu/rtl/vhdl/addsub_28.vhd"
	@echo "# ${QME_HOME}/examples/fpu/rtl/vhdl/fpu.vhd"
	@echo "# ${QME_HOME}/examples/fpu/rtl/vhdl/mul_24.vhd"
	@echo "# ${QME_HOME}/examples/fpu/rtl/vhdl/post_norm_addsub.vhd"
	@echo "# ${QME_HOME}/examples/fpu/rtl/vhdl/post_norm_div.vhd"
	@echo "# ${QME_HOME}/examples/fpu/rtl/vhdl/post_norm_mul.vhd"
	@echo "# ${QME_HOME}/examples/fpu/rtl/vhdl/post_norm_sqrt.vhd"
	@echo "# ${QME_HOME}/examples/fpu/rtl/vhdl/pre_norm_addsub.vhd"
	@echo "# ${QME_HOME}/examples/fpu/rtl/vhdl/pre_norm_div.vhd"
	@echo "# ${QME_HOME}/examples/fpu/rtl/vhdl/pre_norm_mul.vhd"
	@echo "# ${QME_HOME}/examples/fpu/rtl/vhdl/pre_norm_sqrt.vhd"
	@echo "# ${QME_HOME}/examples/fpu/rtl/vhdl/serial_div.vhd"
	@echo "# ${QME_HOME}/examples/fpu/rtl/vhdl/serial_mul.vhd"
	@echo "# ${QME_HOME}/examples/fpu/rtl/vhdl/sqrt.vhd"
	@echo "# "
	@echo "# "
	@echo "# "
	@echo "# We do not support hierachical filelists"
	@echo "# "

	@tput setaf 9;



help_cover::
	@tput setaf 4;
	@echo "########################## SETTING UP AND RUNNING QUESTA COVERCHECK ######################"
	@tput setaf 9;





help_autocheck::
	@tput setaf 4;
	@echo "########################## SETTING UP AND RUNNING QUESTA AUTOCHECK #######################"
	@tput setaf 9;

help_infact::
	@tput setaf 4;
	@echo "########################## SETTING UP AND RUNNING QUESTA INFACT#######################"
	@tput setaf 9;

help_adding_targets::
	@tput setaf 4;
	@echo "########################## ADDING YOUR OWN TARGETS #######################"
	@echo "# Let's face it. You will at some point need to add something special to the flow"
	@echo "# It might be that before you compile the rtl code, you want to auto generate some code."
	@echo "# Or it might be that you use libreoffice to convert the verification plan from xls to xml "
	@echo "# before you run a regression"
	@echo "#"
	@echo "# QME is very flexible when it comes to adding your own targets"
	@echo "# The place to do it is in your local Makefile.block.defaults file (${BLOCK_OVERRIDES})"
	@echo "# You do need to know some Makefile basics. Like how you write a rule etc. "
	@echo "# Take a look at https://www.gnu.org/software/make/manual/make.html#Introduction"
	@echo "#"
	@echo "# Example 1:"
	@echo "#	We would like to add our own targets for each test."
	@echo "#	Instead of just writing make gui TEST=my_test we want to do"
	@echo "#	make my_test"
	@echo "# 	In ${BLOCK_OVERRIDES} we put"
	@echo "#        my_test::"
	@echo "#        <TAB>make gui TEST=my_test"
	@echo "#        Save and then try make my_test -n (-n will display the command that will be sent out)"
	@echo "#"
	@echo "# Example 2:"
	@echo "#	We would like to generate uvm registers before we compile the tb"
	@echo "#        This time we use a predefined target named precompile_tb to implement our function"
	@echo "# 	We like variables so we add:"
	@echo "# 	XLSFILE=<path to file>"
	@echo "#	# PLEASE NOTICE THE USE OF ::"
	@echo "#	precompile_tb::"
	@echo "#		ruvm_xls2csv.pl dollar{XLSFILE}"
	@echo "# 		$\{QUESTASIM_HOME}/RUVM_4.4/vreguvm -csvin regs.csv blocks.csv \\"
	@echo "#                maps.csv -block example_block_registers -uvmout $\{QME_PROJECT_HOME}/ra_example/tb/registers/example_block_regs_pkg.sv "
	@echo "#"
	@echo "# 	Voila!!!"

	@tput setaf 9;


help_tutorial::
	@tput setaf 4;
	@echo "########################## SIMULATION TUTORIALS #########################################"
	@echo "# Here's a simple tutorial on how to use QME"
	@echo "# 1. Go to the location of the QME source code."
	@echo "# 2. do source source_me.sh"
	@echo "# 3. Create a simulation directory using:"
	@echo "#    create_questa_simdir.pl -s sim_fpu -b fpu"
	@echo "# 4. Copy the last line with the chdir command and execute it. Now you should stand in the"
	@echo "#    simulation directory sim_fpu"
	@echo "# This is the simulation setup you need to do. before we try the different sections below"
	@echo "# "
	@echo "### BASIC SIMULATION ###"
	@echo "# This part illustrates how you run basic simulation"
	@echo "# 1. make compile"
	@echo "# 2. make gui TEST=fpu_test_patternset"
	@echo "# 3. vsim>run -a;exit -f"
	@echo "#    Notice that you now got a run directory run.fpu_test_patternset.0 (run.<testname>.<seed>)"
	@echo "#    In this directory all the logs and output data from this simulation is stored"
	@echo "#    Try changing one file: touch ${QME_HOME}/examples/fpu/tb/src/top.sv"
	@echo "# 4. make recompile"
	@echo "# 5. make gui TEST=fpu_test_patternset"
	@echo "# Try different debug visibility:"
	@echo "# 6. make gui TEST=fpu_test_patternset DEBUG_LEVEL=FULL"
	@echo "# Check out schematic viewer, fsm etc"
	@echo "# "
	@echo "### REGRESSION ###"
	@echo "# This part illustrates how we work with regressions in QME."
	@echo "# 1. The file ${TC_SPEC} contains the information necessary for regressions like:"
	@echo "#    Name of verification plan and which tests and how many times we would like to run them."
	@echo "#    The first column is the name of the parameter setup that we are using"
	@echo "#    The second column is the name of the test we want to run"
	@echo "#    The third column contains the number of simulations that you would like to run"
	@echo "#    The rest of the columns are a list of seeds. random is default"

	@tput setaf 9;
	@cat ${TC_SPEC}
	@tput setaf 4;
	@echo "# 2. Start the regression with:"
	@echo "#    make regression&"
	@echo "# Select the \"VRM Cockpit\" tab and highlight fpu_regression, RMP and select \"run\" or \"run special\""
	@echo "# The latter allows you to use the gui to select and modify stuff before starting the regression"
	@echo "# Play with the VRM Results window, expand, flat/hier view etc"
	@echo "# In the  \"VRM Cockpit\", expand until you find merged_ucdbfiles. Double click on the ucdb file with todays date."
	@echo "# In the  \"Browser\", try different Column Layouts in the drop down list above the window."
	@echo "# In the  \"Browser\", double click on the UCDB file"
	@echo "# Open View-> \"Verification Tracker\" and explore the \"Tracker\" "
	@echo "# Close the Run Manager"
	@echo "# If you have Questa Formal tools installed and set up, try this:"
	@echo "# make regression COVER=1&"
	@tput setaf 9;

help_getting_started::
	@tput setaf 4;
	@echo "########################## Getting started #########################################"
	@echo "# Congratulations. Assuming that you have installed QME and that you have Questa installed"
	@echo "# you are now ready to get started. This example illustrates how you do it"
	@echo "#"
	@echo "# 1. Create a simulation directory: create_questa_simdir.pl --simdir=sim_my_block --block=my_block"
	@echo "#"
	@echo "# 2. Provide a RTL filelist for your rtl code. Located at \$QME_PROJECT_HOME/<block>/rtl/rtl.files"
	@echo "#    ( You can test if it works by doing \"make compile_rtl\" in your sim directory (sim_my_block)"
	@echo "#"
	@echo "# 3. Provide a TB filelist for your tb code. Located at \$QME_PROJECT_HOME/<block>/sim/tb.files"
	@echo "#    ( You can test if it works by doing \"make compile_tb\" in your sim directory (sim_my_block)"
	@echo "#"
	@echo "# 4. \"make compile\" will compile everything together"
	@echo "#"
	@echo "# 5. Start simulation with \"make gui TEST=<testname>\""
	@echo "#"
	@tput setaf 9;
