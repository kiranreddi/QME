<?xml version="1.0"?>
<rmdb loadtcl="mytcl" >
  <!-- ========================================================== -->
  <!-- BASE RUNNABLES- PLEASE EDIT or OVERRIDE -->
  <!-- ========================================================== -->
  <runnable name="projectsetup" type="base">
    <parameters>
      
      <parameter name="BLOCKNAME">replace_with_blockname</parameter>
      <parameter name="MAKEFILE"> (%VRUNDIR%)/Makefile</parameter>

      <parameter name="MERGE_HOME">(%SCRATCH%)/../merged_ucdbfiles</parameter>
      <parameter name="REPORTS_HOME">(%SCRATCH%)/../merged_ucdbfiles</parameter>
      <parameter name="HTML_REPORTDIR">(%DATADIR%)/../html_reports</parameter>
      <!-- BEHAVIOUR CONTROL -->
      <!-- GRID can be LOCAL,LSF or SGE -->
      <parameter name="GRID">LOCAL</parameter>
      <parameter name="VERIFICATION_LEVEL">BLOCK</parameter>
      <parameter name="DEBUG_LEVEL">LOW</parameter>
      <parameter name="SEND_EMAIL">1</parameter>
      <parameter name="VCOVER_OPTIONS">-32</parameter>
      <parameter name="MODE">batch</parameter>
      <parameter name="RANKING">0</parameter>
      <parameter name="COVERCHECK">0</parameter>
      <parameter name="AUTOCHECK">0</parameter>
      <parameter name="CDC_STATIC">0</parameter>
      <parameter name="CDC_PROTOCOL">0</parameter>
      <parameter name="CDC_FX">0</parameter>
      <parameter name="FORMAL">0</parameter>
      <parameter name="XPROP">0</parameter>
      <parameter name="REQUIRE_VPLAN">0</parameter>
      <parameter name="RERUN_FAILING_TESTS">1</parameter>
      <parameter name="TIMESTAMP">0</parameter>

      <!-- Verification plan settings -->
      <parameter name="USE_XML_VPLAN">0</parameter>
      <parameter name="XML_VPLAN">""</parameter>
      <parameter name="EXCEL_VPLAN">""</parameter>
      <parameter name="XML2UCDB_DATAFIELDS">-datafields "Section, Title, Description, Link, Type, Weight, Goal, Drop"</parameter>


      <!--parameter name="DEBUG">0</parameter-->      
      <!-- LSF PARAMETERS Suitable to override -->
      <parameter name="LSFARGS">-I</parameter>
      <!-- Sun Grid PARAMETERS Suitable to override -->
       <parameter name="SGEARGS"></parameter>
      <!-- Path do different SW -->
      <parameter name="SENDMAIL">/usr/lib/sendmail</parameter>
      <parameter name="SOFFICE">soffice</parameter>
      <!-- Extracted parameters -->
      <parameter name="DUT_SETUPS" type = "tcl">[get_all_setups (%TCSPEC%)]</parameter>
   </parameters>
  </runnable>

  <!-- ========================================================== -->
  <!-- BASE RUNNABLE -->
  <!-- ========================================================== -->

  <runnable name="testsetup" type="base" base="projectsetup" >
    <parameters>
      <!-- == Parameters to control the running of the regressions == -->
      <parameter name="INTERACTIVE" export="yes" type="tcl">[TestModeInteractive {(%MODE%)}]</parameter>
      <parameter name="triageoptions">-severity IFEW -rulesfile (%VRUNDIR%)/transformrule.txt -verbose</parameter>
      <parameter name="tplanoptions">-format Excel -autoweight -verbose -startstoring 1 (%XML2UCDB_DATAFIELDS%)</parameter>
      <parameter name="mergeoptions">-testassociated</parameter>
    </parameters>


    <!-- ========================================================== -->
    <!-- GRID settings-->
    <!-- ========================================================== -->

    <method name="grid" gridtype="lsf" mintimeout="600000" maxrunning="(%MAX_PARALLEL_JOBS%)" if="{(%GRID%)} eq {LSF}">
      <command>bsub  -J (%RUNNABLE%) -oo (%TASKDIR%)/(%SCRIPT%).bat.o%J -eo (%TASKDIR%)/(%SCRIPT%).bat.e%J (%LSFARGS%) (%WRAPPER%) </command>
    </method>   
    
    <!-- NOTE! Not tested -->
    <method name="grid" gridtype="sge" action="execScript" mintimeout="600000" maxrunning="(%MAX_PARALLEL_JOBS%)" if="{(%GRID%)} eq {SGE}">
      <command>qsub (%SGEARGS%) -N (%INSTANCE%) (%WRAPPER%)</command> 
    </method>
  </runnable>

  
  <!-- ================================================ -->
  <!-- == Top Level Group Runnable  =================== -->
  <!-- ================================================ -->
  <runnable name="my_run" type="group" sequential="yes" base="testsetup">
    <members>
      <member>preconverting</member>
      <member>all_setups</member>
      <member>finalize_ranking</member>
      <member>send_email</member>
    </members>
  </runnable>

  <!-- ================================================================================= -->
  <!-- == preconverting and it's children                                 ============== -->
  <!-- == We use openoffice to pick up xls files and convert them to ucdb ============== -->
  <!-- ================================================================================= -->

  <!-- Due to problems if you run multiple instances of openoffice at the same time, we 
       need to run converting sequentially -->
      
  <runnable name="preconverting" foreach="(%DUT_SETUPS%)" base="testsetup" type="group" sequential="yes" if="(%REQUIRE_VPLAN%) eq {1}">
    <members>
      <member>convert_vplan_to_ucdb</member>
    </members>
  </runnable>


  
  <runnable name="convert_vplan_to_ucdb"  base="projectsetup" type="task"  if="(%REQUIRE_VPLAN%) eq {1}">
    <parameters>
      <parameter name="CURRENT_SETUP">(%preconverting.ITERATION%)</parameter>	  
      <parameter name="VPLAN_UCDB">(%DATADIR%)/(%CURRENT_SETUP%).testplan.ucdb</parameter>	  
      <parameter name="VPLAN_XML_TS" type="tcl">[get_extra_args (%TCSPEC%) (%CURRENT_SETUP%) VPLAN_XML]</parameter>
      <parameter name="VPLAN_EXCEL_TS" type="tcl">[get_extra_args (%TCSPEC%) (%CURRENT_SETUP%) VPLAN_EXCEL]</parameter>
    </parameters>
    <!-- Need to execute locally due to openoffice -->
    <method>
    </method>
    <execScript launch="/bin/csh -f">
      <command>unsetenv MODELSIM </command>
      <command>echo DBG: ---------------------------------------</command>
      <command>echo DBG: CURRENT_SETUP  =(%CURRENT_SETUP%)</command>
      <command>echo DBG: TCSPEC         =(%TCSPEC%)</command>
      <command>echo DBG: VPLAN_UCDB     =(%VPLAN_UCDB%)</command>
      <command>echo DBG: VPLAN_XML_TS   =(%VPLAN_XML_TS%)</command>
      <command>echo DBG: VPLAN_EXCEL_TS =(%VPLAN_EXCEL_TS%)</command>
      <command>echo DBG: ---------------------------------------</command>

      <command> set foundplan=0 </command>
      <command>  set vplan_xml="(%VPLAN_XML_TS%)" </command>
      <command>if ((%USE_XML_VPLAN%) != 0) then </command>    
      <command>  echo "USE_XML_VPLAN=(%USE_XML_VPLAN%) tells us to use xml verification plan"</command> 
      
      <command>  if ($vplan_xml != "") then </command>
      <command>    set vplan_xml="(%VPLAN_XML_TS%)"  </command>
      <command>    echo "Found xml vplan specified in (%TCSPEC%):$vplan_xml"</command> 
      <command>  else </command>
      <command>    set vplan_xml=(%XML_VPLAN%)  </command>
      <command>    echo "using xml vplan specified in  Makefile:$vplan_xml"</command> 
      <command>  endif</command>  
      
      <command>  if (-e $vplan_xml) then </command>
      <command>     echo "Converting..."</command>
      <command>     xml2ucdb -format Excel -datafields (%XML2UCDB_DATAFIELDS%) $vplan_xml (%VPLAN_UCDB%) </command>
      <command>     if ($status != 0) exit 1          </command>    
      <command>     set foundplan=1</command>
      <command>  endif</command>    

      <command>  if ($foundplan != 1) then </command>
      <command>    echo "No verification plan was found."</command>
      <command>    echo "Please add $vplan_xml or update (%TCSPEC%)"      </command>
      <command>    echo "with (%CURRENT_SETUP%):VPLAN_XML=&lt;file&gt;"      </command>
      <command>    echo "or do make regression REQUIRE_VPLAN=0"      </command>
      <command>    if ((%REQUIRE_VPLAN%) != 0)  then </command>
      <command>      echo "Exiting..." </command>
      <command>      exit 1 </command>
      <command>    endif</command>
      <command> endif</command>
      <!-- not USE_XML_VPLAN -->
      <command> else </command>

      <command>  set vplan_excel="(%VPLAN_EXCEL_TS%)" </command>
      <command>  if ($vplan_excel != "") then </command>
      <command>    set vplan_excel="(%VPLAN_EXCEL_TS%)"</command>
      <command>  else </command>
      <command>    set vplan_excel="(%EXCEL_VPLAN%)"</command>
      <command>  endif</command>    
      <command>  echo "Using excel verification plan:$vplan_excel"</command> 

      <command>  if (-e $vplan_excel) then </command>
      <command>    echo "Found $vplan_excel - starting soffice"</command> 
      <command>    (%SOFFICE%) --headless --convert-to xml:"MS Excel 2003 XML" $vplan_excel </command>
      <command>    if ($status != 0) then </command>    
      <command>  echo " soffice conversion failed"</command>    
      <command>  exit 1          </command>    
      <command> endif</command>    
      <command> echo "converting xml to ucdb" </command>  
      <command>    xml2ucdb -format Excel -datafields (%XML2UCDB_DATAFIELDS%) *.xml (%VPLAN_UCDB%) </command>
      <command>    if ($status != 0) exit 1          </command>    
      <command>  else </command>
      <command>    echo "No verification plan was found. Please add $vplan_excel"      </command>
      <command>    echo "or do make regression REQUIRE_VPLAN=0"      </command>
      <command>    if ((%REQUIRE_VPLAN%) != 0)  then</command>
      <command>      exit 1 </command> 
      <command>    endif</command>    
      <command> endif</command>    
      <command> endif</command>    
    </execScript>
  </runnable>




  <runnable name="send_email" type="task" if="(%SEND_EMAIL%)">
    <!-- Don't run on GRID-->
    <method>
    </method>
    <parameters>
      <parameter name="EMAIL_SUBJECT">(%BLOCKNAME%) Regression Completed</parameter>
      <parameter name="MESSAGE_FILE">(%TASKDIR%)/email_message.txt</parameter>
      <parameter name="ATTACHMENT_FILE">regression_report.txt</parameter>
      <parameter name="EMAIL_RECIPIENT">`whoami`</parameter>
    </parameters>
    <execScript launch="/bin/bash" mintimeout="300"> 
      <command> ln -s (%MERGE_HOME%) (%DATADIR%)/merged_ucdbfiles </command>
       <command>EMAILMESSAGE=&quot;(%MESSAGE_FILE%)&quot;</command>
       <command>echo &quot;To: (%EMAIL_RECIPIENT%)&quot; &gt; (%MESSAGE_FILE%)</command> 
       <!--command>echo &quot;Cc: (%EMAIL_CCLIST%)&quot; &gt;&gt; (%MESSAGE_FILE%)</command--> 
       <command>echo &quot;Subject: (%EMAIL_SUBJECT%)&quot; &gt;&gt; (%MESSAGE_FILE%)</command>; 
       <command>echo &quot;Regression on (%BLOCKNAME%) Done!&quot; &gt;&gt; (%MESSAGE_FILE%)</command>
       <command>echo &quot;&quot; &gt;&gt; (%MESSAGE_FILE%)</command>
       <command>echo &quot;Time:      `date`&quot; &gt;&gt; (%MESSAGE_FILE%)</command>
       <command>echo &quot;&quot; &gt;&gt; (%MESSAGE_FILE%)</command>
       <command>echo &quot;Machine Name :      `hostname`&quot; &gt;&gt; (%MESSAGE_FILE%)</command>
       <command>echo &quot;&quot; &gt;&gt; (%MESSAGE_FILE%)</command>
       <command>echo &quot;&quot; &gt;&gt; (%MESSAGE_FILE%)</command>
       <command>printf "########################################\n" &gt;&gt; (%MESSAGE_FILE%)</command>
       <command>printf "##                        REGRESSION RESULTS                           ##\n" &gt;&gt; (%MESSAGE_FILE%)</command>
       <command>printf "########################################\\n" &gt;&gt; (%MESSAGE_FILE%)</command>
       <command>printf "\n" &gt;&gt; (%MESSAGE_FILE%)</command>
       <command>printf "Regression run dir: (%SCRATCH%)\n\n" &gt;&gt; (%MESSAGE_FILE%)</command>
       <command>printf "Summary below:\n\n" &gt;&gt; (%MESSAGE_FILE%)</command>
       <command>vrun -status -filter status!=Empty -columns action,status,datetime -vrmdata (%DATADIR%) &gt;&gt; (%MESSAGE_FILE%)</command>
       <command>(%SENDMAIL%)  (%EMAIL_RECIPIENT%) &lt; $EMAILMESSAGE</command>
       <command>echo "Regression complete and email report sent to (%EMAIL_RECIPIENT%)"</command>
    </execScript>
  </runnable>

  <!-- ================================================================================= -->
  <!-- == all setups: We need to handle each setup separatly              ============== -->
  <!-- == Below is "all_setups" and it's children                         ============== -->
  <!-- ================================================================================= -->

  <runnable name="all_setups" type="group" sequential="no" base="testsetup">
    <parameters>
    </parameters>
    <members>
      <member>exec</member>
    </members>
  </runnable>

  <!-- == exec: This is what we do for each setup ============== -->
  <runnable name="exec" type="group" foreach="(%DUT_SETUPS%)" sequential="yes" base="testsetup">
    <parameters>
      <parameter name = "ACTUAL_SETUP">(%exec.ITERATION%)</parameter>      
      <parameter name="mergelist">(%DATADIR%)/(%ACTUAL_SETUP%).mergelist</parameter>
      <parameter name="triagefile">(%ACTUAL_SETUP%).(%BLOCKNAME%).tdb</parameter>
    </parameters>
    <members>
      <member>compile_all</member>
      <member>cdc_static</member>
      <member>all_sims</member>
      <member>vm</member>
    </members>
  </runnable>
  
  <!-- == compile_all: we need to compile all the hdl code  ============== -->
   <runnable name="compile_all" type="task" base = "testsetup" >
     <parameters>
      <parameter name = "ACTUAL_SETUP">(%exec.ITERATION%)</parameter>      
      <!-- We do allow you to add extra arguments in the tc spec file -->
      <parameter name="EXTRA_VLOG_ARGS" type="tcl">[get_extra_args (%TCSPEC%) (%ACTUAL_SETUP%) vlog] </parameter>
      <parameter name="EXTRA_VCOM_ARGS" type="tcl">[get_extra_args (%TCSPEC%) (%ACTUAL_SETUP%) vcom] </parameter>
      <parameter name="EXTRA_OPT_ARGS" type="tcl">[get_extra_args (%TCSPEC%) (%ACTUAL_SETUP%) vopt] </parameter>
      <parameter name="EXTRA_X_COMP_ARGS" type="tcl">[get_extra_args (%TCSPEC%) (%CURRENT_SETUP%) X_COMP_ARGS]</parameter>
      <parameter name="EXTRA_SC_ARGS"    type="tcl">[get_extra_args (%TCSPEC%) (%CURRENT_SETUP%) SC_ARGS]</parameter>
      <parameter name="ALL_COMPILE_ARGS">X_COMP_ARGS=&quot; (%EXTRA_X_COMP_ARGS%) SETUP=(%ACTUAL_SETUP%) (%EXTRA_VLOG_ARGS%) (%EXTRA_VCOM_ARGS%)&quot; SC_ARGS=(%EXTRA_SC_ARGS%)</parameter>
     </parameters>
     <execScript launch="/bin/csh -f">
       <command>unsetenv MODELSIM </command>
       <!-- First we compile the code -->
       <command>  make compile -f (%MAKEFILE%) (%ALL_COMPILE_ARGS%) </command>          
       <command>  if ($status != 0) exit 1 </command>
       <!-- After compiling, we optimize the design -->
       <command>echo "Starting to optimize" </command>

       <!-- In chip mode, we have less visibility and no coverage-->
       <command>if ((%VERIFICATION_LEVEL%) == "CHIP") then</command>
       <command>   make opt_fast -f (%MAKEFILE%) CHIP=1 X_OPT_ARGS=(%EXTRA_OPT_ARGS%)</command>
       <command>   if ($status != 0) exit 1 </command>

       <!-- If we want to automatically rerun failing tests,we create a dbg opt with more vis. -->       
       <command>   if ((%RERUN_FAILING_TESTS%) == 1) then</command>
       <command>     make opt_dbg -f (%MAKEFILE%) CHIP=1 X_OPT_ARGS=(%EXTRA_OPT_ARGS%)</command>
       <command>     if ($status != 0) exit 1 </command>
       <command>   endif </command>

       <command>else </command>
       <!-- Block mode -->
       <command>   make opt_fast -f (%MAKEFILE%) COVER=true  X_OPT_ARGS=(%EXTRA_OPT_ARGS%) FAST=true</command>
       <command>   if ($status != 0) exit 1 </command>
       <!-- If we want to automatically rerun failing tests,we create a dbg opt with more vis. -->       
       <command>   if ((%RERUN_FAILING_TESTS%) == 1) then</command>
       <command>     make opt_dbg -f (%MAKEFILE%) COVER=true  X_OPT_ARGS=(%EXTRA_OPT_ARGS%) FAST=true</command>
       <command>     if ($status != 0) exit 1 </command>
       <command>   endif </command>

       <command> endif </command>
     </execScript>
   </runnable>

  <!-- == cdc_static: Running formal app cdc static  ============== -->
  <runnable name="cdc_static" type="task" base="exec" if="(%CDC_STATIC%) eq {1}">
    <execScript launch="/bin/csh -f">
      <command> echo "Static CDC in regression not yet implemented" </command>
    </execScript>
  </runnable>

  <!-- == all_sims: Running all simulations and formal apps in parallell  ============== -->

  <runnable name="all_sims" type="group" sequential="no" base="testsetup">
    <parameters>
      <parameter name = "ACTUAL_SETUP">(%exec.ITERATION%)</parameter>      
      <parameter name="VALID_TESTCASES" type="tcl">[expand_testcases (%TCSPEC%) [get_setup_from_context (%CONTEXT%)]]</parameter>
      <parameter name="mergelist">(%DATADIR%)/(%ACTUAL_SETUP%).mergelist</parameter>
    </parameters>
    <members>
      <member>simulate</member>
      <member>formal</member>
      <member>autocheck</member>
      <member>xprop</member>
    </members>
  </runnable>

  <!-- == simulate: Launching all simulations  ============== -->
  <!-- == DEBUGMODE is an automatic variable from vrun -->
  <runnable name="simulate"  type="task"  foreach="(%VALID_TESTCASES%)" base="testsetup" >
    <parameters>
      <parameter name="TESTNAME" type="tcl">[lindex [split [lindex [split [file tail (%CONTEXT%)] ":"] 0] "~"] 1]</parameter>
      <parameter name="ACTUAL_SETUP">(%exec.ITERATION%)</parameter>
      <parameter name="EXTRA_VSIM_ARGS" type="tcl">[get_extra_args (%TCSPEC%) (%ACTUAL_SETUP%) vsim] </parameter>
      <parameter name="seed" type="tcl">[lindex [split [file tail  (%CONTEXT%)] ":"] 1]</parameter>
      <parameter name="ucdbfile">(%ACTUAL_SETUP%)_(%ITERATION%).ucdb</parameter>
      <parameter name="ucdbtestname">(%ACTUAL_SETUP%)_(%ITERATION%)</parameter>
      <parameter name="UCDBFILE" export="yes">(%ucdbfile%)</parameter>
    </parameters>
    <localfile type="link" src="(%TASKDIR%)/../../compile_all/modelsim.ini"/>
    <execScript launch="/bin/csh -f">
      <command>echo mergelist=(%mergelist%) </command>
      <command>unsetenv MODELSIM </command>
      <command>echo "The current DEBUGMODE value is: (%DEBUGMODE:0%)"</command>
      <!-- First time we run DEBUGMODE is 0 -->
      <command>if (("(%DEBUGMODE%)" == 0)) then  </command>
      <command>   echo "Running simulation with minimum visibilty"</command>      
      <command>   ln -s 	../../compile_all/questa_libs</command>
      <command>   if ($status != 0) exit 1 </command>
      <command>   ln -s 	../../compile_all/c_libs</command>
      <command>   if ($status != 0) exit 1 </command>
      <command>   make batch_regression  -f (%MAKEFILE%) TEST=(%TESTNAME%) SEED=(%seed%) UCDBFILE=(%ucdbfile%) UCDBTESTNAME=(%ucdbtestname%)  UVM_VERBOSITY=UVM_NONE COVER=true</command>
      <command>   if ($status != 0) exit 1 </command>
      <command>else </command>
      <!-- If we fail and have activated rerun mode, DEBUGMODE will be set to 1 -->
      <command>  echo "The current DEBUGMODE value is: (%DEBUGMODE:0%)"</command>
      <command>  echo "rerunning simulation with all full debug for postdebug" </command>
      <command>  ln -s 	../../compile_all/questa_libs</command>
      <command>  if ($status != 0) exit 1 </command>
      <command>  ln -s 	../../compile_all/c_libs</command>
      <command>  if ($status != 0) exit 1 </command>
      <command>  ln -s 	../../compile_all/vsim.dbg</command>
      <command>  if ($status != 0) exit 1 </command>
      <command>  make batch_regression_dbg  -f (%MAKEFILE%) TEST=(%TESTNAME%) SEED=(%seed%) UCDBFILE=(%ucdbfile%) UCDBTESTNAME=(%ucdbtestname%) COVER=true</command>
      <command>  if ($status != 0) exit 1 </command>
      <command> endif </command>
    </execScript>
  </runnable>

  <!-- == formal: Launching formal property  ============== -->
  <runnable name="formal" type="task" base="exec" if="(%FORMAL%) eq {1}">
    <localfile type="link" src="(%TASKDIR%)/../../compile_all/modelsim.ini"/>
    <execScript launch="/bin/csh -f">
      <command> echo "formal in regression not yet implemented" </command>
    </execScript>
  </runnable>

  <!-- == formal: Launching formal app xprop  ============== -->
  <runnable name="xprop" type="task" base="exec" if="(%XPROP%) eq {1}">
    <localfile type="link" src="(%TASKDIR%)/../../compile_all/modelsim.ini"/>
    <execScript launch="/bin/csh -f">
      <command> echo "xprop in regression not yet implemented" </command>
    </execScript>
  </runnable>

  <!-- == autocheck: Launching formal app autocheck  ============== -->
  <!-- NOTE! add ucdb storage of results -->
  <runnable name="autocheck" type="task" base="exec" if="(%AUTOCHECK%) eq {1}">
    <localfile type="link" src="(%TASKDIR%)/../../compile_all/modelsim.ini"/>
    <execScript launch="/bin/csh -f">
      <command>unsetenv MODELSIM </command>
      <command>ln -s 	../../compile_all/questa_libs</command>
      <command>if ($status != 0) exit 1 		</command>      
      <command>make create_liblists get_generics autocheck_only  -f (%MAKEFILE%) </command>
      <command>if ($status != 0) exit 1 		</command>      
    </execScript>
  </runnable>
  

  <!-- == vm: this is doing all the verification management  ============== -->
  <runnable name="vm" type="group" sequential="yes">
    <parameters>
      <parameter name="CURRENT_SETUP">(%exec.ITERATION%)</parameter>	  
      <parameter name="mergelist">(%DATADIR%)/(%CURRENT_SETUP%).mergelist</parameter>
      <parameter name="mymergefile" >(%MERGE_HOME%)/(%CURRENT_SETUP%).(%BLOCKNAME%).(%TIMESTAMP%).merge.ucdb</parameter>
      <parameter name="triagefile">(%DATADIR%)/(%CURRENT_SETUP%).(%BLOCKNAME%).(%TIMESTAMP%).tdb</parameter>
    </parameters>
    <members>
      <member>merge_ucdb_files</member>
      <member>covercheck</member>
      <member>vm_finish</member>
    </members>
  </runnable>

  <!-- == merge_ucdb_files: We decided to use the mergelist and do merge in our own step  ============== -->
  <runnable name="merge_ucdb_files" type="task" base="exec">
    <parameters>
      <parameter name="CURRENT_SETUP">(%exec.ITERATION%)</parameter>	  
      <parameter name="VPLAN_UCDB">(%DATADIR%)/(%CURRENT_SETUP%).testplan.ucdb</parameter>	  
    </parameters>
    <execScript launch="/bin/csh -f">
      <command> echo (%CURRENT_SETUP%) and (%mymergefile%) and (%mergelist%) </command>
      <command> unsetenv MODELSIM</command>
      <command> if (-e (%mergelist%)) then </command>
      <command>   if (-e (%VPLAN_UCDB%)) then </command>
      <command>     vcover merge (%VCOVER_OPTIONS%) -out (%mymergefile%) -inputs (%mergelist%) (%mergeoptions%) (%VPLAN_UCDB%) </command>
      <command>     if ($status != 0) exit 1 		</command>      
      <command>   else </command>
      <command>     vcover merge  (%VCOVER_OPTIONS%) -out (%mymergefile%) -inputs (%mergelist%) (%mergeoptions%)</command>
      <command>     if ($status != 0) exit 1 		</command>      
      <command>   endif </command>
      <command>  else </command>
      <command>   echo "No (%mergelist%) was found. Could be because no simulation passed -no idea to do anything more..." </command>
      <command>  exit 1 </command>
      <command> rm -f (%MERGE_HOME%)</command>
      <command>     if ($status != 0) exit 1 		</command>      
      <command> endif </command>
    </execScript>
  </runnable>

  <!-- == covercheck: We use formal app to target unreached code coverage == -->
  <runnable name="covercheck" type="task" base="exec" if="(%COVERCHECK%) eq {1}">
    <localfile type="link" src="(%TASKDIR%)/../../compile_all/modelsim.ini"/>
    <execScript launch="/bin/csh -f">
      <command>unsetenv MODELSIM </command>
      <command>   ln -s 	../../compile_all/questa_libs</command>
      <command>   if ($status != 0) exit 1 		</command>      
      <command>   make create_liblists get_generics covercheck_only  -f (%MAKEFILE%) MERGED_UCDB=(%mymergefile%)  </command>
      <command>   if ($status != 0) exit 1 		</command>      
      <command>   vsim -viewcov (%mymergefile%) -do "coverage report -code ecsfb -totals -file before_exclusions.rpt;do Output_Results/covercheck_exclude.do;coverage save (%mymergefile%);coverage report -code ecsfb -totals -file after_exclusions.rpt;exit -f" -c</command>
    </execScript>
  </runnable>

  <!-- == vm_finish: Finish up all the verification management tasks== -->
  <runnable name="vm_finish" type="group" sequential="no">
    <parameters>
      <parameter name="CURRENT_SETUP">(%exec.ITERATION%)</parameter>	  
      <parameter name="mergelist">(%DATADIR%)/(%CURRENT_SETUP%).mergelist</parameter>
      <parameter name="mymergefile" >(%MERGE_HOME%)/(%CURRENT_SETUP%).(%BLOCKNAME%).(%TIMESTAMP%).merge.ucdb</parameter>
      <parameter name="triagefile">(%DATADIR%)/(%CURRENT_SETUP%).(%BLOCKNAME%).(%TIMESTAMP%).tdb</parameter>
    </parameters>
    <members>
      <member>coverage_html_report</member>
      <member>coverage_trend_report</member>
      <member>create_rankfile</member>
    </members>
  </runnable>

  <!-- == coverage_html_report: Generate html report == -->
  <runnable name="coverage_html_report" type="task" base="testsetup">
    <execScript>
      <command> echo "Creating HTML report for (%mymergefile%)"                               </command>
      <command> vcover report -html -nosource -htmldir (%HTML_REPORTDIR%)/(%ACTUAL_SETUP%)_coverage_report (%mymergefile%)</command>
    </execScript>
  </runnable>

  <!-- == coverage_trend_report: Generate trend html report == -->
  <runnable name="coverage_trend_report" type="task" base = "testsetup">
    <execScript launch="/bin/csh -f">
      <command>vcover merge  (%VCOVER_OPTIONS%) -trend (%MERGE_HOME%)/(%ACTUAL_SETUP%)_trend.ucdb (%MERGE_HOME%)/(%ACTUAL_SETUP%)*merge.ucdb </command>
      <command> if ($status != 0) exit 1 </command>
      <command>vcover report -trend -csv (%MERGE_HOME%)/(%ACTUAL_SETUP%)_trend.ucdb -file (%MERGE_HOME%)/(%ACTUAL_SETUP%)_trend_report.csv -bydu </command>
      <command> if ($status != 0) exit 1 </command>
      <command>vcover report -trend -html (%MERGE_HOME%)/(%ACTUAL_SETUP%)_trend.ucdb -nodetails -htmldir (%HTML_REPORTDIR%)/(%ACTUAL_SETUP%)_trend_report </command> >
      <command> if ($status != 0) exit 1 </command>
    </execScript>
  </runnable>

  <!-- == create_rankfile: If ranking is enabled, we rank and create a ranked tc spec file == -->
  <runnable name="create_rankfile" type="task" if="(%RANKING%) eq {1}" >
    <parameters>
      <parameter name = "ACTUAL_SETUP">(%exec.ITERATION%)</parameter>      
      <parameter name="mymergefile" >(%MERGE_HOME%)/(%ACTUAL_SETUP%).(%BLOCKNAME%).(%TIMESTAMP%).merge.ucdb</parameter>
    </parameters>
    
    <execScript>
      <command>if [catch {open (%SCRATCH%)/(%ACTUAL_SETUP%)_(%TIMESTAMP%)_ranked_tc_spec.list w} ranked_spec_file] { </command>
      <command>  puts stderr "Cannot create file (%SCRATCH%)/(%ACTUAL_SETUP%)_(%TIMESTAMP%)_ranked_tc_spec.list\n"  </command>
      <command>  exit                                                            </command>
      <command>}                                                                 </command>
      <command>set f (%mymergefile%)                                               </command>
      <command> echo "Ranking: $f" 	                                             </command>
      <command> set test [lindex [split [file rootname [file tail $f]] "."] 0 ]  </command>
      <command> set t [lindex [split $test _] 0]                                 </command>
      <command> vcover ranktest -concise -rankfile (%SCRATCH%)/$t.rank $f        </command>
      <command> array unset test_seed                                            </command>
      <command> if [catch {open (%SCRATCH%)/$t.contrib r} contrib_file] {        </command>
      <command>   puts stderr "Cannot open file (%SCRATCH%)/$t.contrib\n"        </command>
      <command>   exit                                                           </command>
      <command> }                                                                </command>
      <command>  # Read and close the file                                       </command>
      <command>  foreach line [split [read $contrib_file] \n] {                  </command>
      <command>    if {[regexp {.ucdb} $line]} {                                 </command>
      <command>      set tmp [split [vcover attribute -seed $line]]              </command>
      <command>      set testname [lindex [ split [lindex $tmp 2 ] : ] 0 ]       </command>
      <command>      set testname [string map {(%ACTUAL_SETUP%)_ ""} $testname] </command>
      <command>      set seed [lindex $tmp [expr [llength $tmp] - 2] ]           </command>
      <command>      lappend test_seed($testname) $seed                          </command>
      <command>    }                                                             </command>
      <command>  }                                                               </command>
      <command>  close $contrib_file                                             </command>
      <command>  set search [array startsearch test_seed]                        </command>
      <command>  while {[array anymore test_seed $search]} {                     </command>
      <command>    set testname [array nextelement test_seed $search]            </command>
      <command>    set nr_of_runs [llength $test_seed($testname)]                </command>
      <command>    puts $ranked_spec_file "(%ACTUAL_SETUP%) $testname  $nr_of_runs $test_seed($testname)"</command>
      <command>  }                                                               </command>
      <command>close $ranked_spec_file                                           </command>
    </execScript>
  </runnable>

  <!-- == finalize_ranking: If ranking is enabled, we need to merge tests for all setups to one rankked tc spec file== -->
  <runnable name="finalize_ranking" type="task" base = "testsetup" if="(%RANKING%) eq {1}">
    <execScript launch="/bin/csh -f">
      <command>cat (%SCRATCH%)/*(%TIMESTAMP%)_ranked_tc_spec.list >> (%SCRATCH%)/(%TIMESTAMP%)_ranked_tc_spec.txt</command>
    </execScript>
  </runnable>    

  
  <!-- ================================================ -->
  <!-- == Over-ride TCL built-in                     == -->
  <!-- == Advanced VRM capabilities                  == -->
  <!-- == The underlying default behaviour of VRM    == -->
  <!-- == can be modified using the exposed TCL API  == -->
  <!-- == Usually these defined TCL methods do       == -->
  <!-- == by default. These methods can be           == -->
  <!-- == overriden within the usertcl element of    == -->
  <!-- == RMDB. In addition the user can define TCL  == -->
  <!-- == procedures that they wish to call in       == -->
  <!-- == action scripts here also.                  == -->
  <!-- ================================================ -->
  <usertcl name="mytcl">
   <!-- Overriding the VRM procedure StopRunning 
        In this case, VRM will stop if 1000 errors are generated 
        during execution of a regression                   -->
   proc StopRunning {userdata} {
    upvar $userdata data
     set result [expr {$data(fail) == 1000}]
    return $result
   }


    proc TestModeInteractive {MODE} {
      if {[string match $MODE {interactive}]} {
        return -gui
      } else {
       return -c
      }
    }


   <!-- expand_testcases: This tcl procedure will expand all the testcases
        for a certain setup -->

   proc expand_testcases {file_name setup} {
   set tclist ""
   set tmp_file [open $file_name r]
   while {![eof $tmp_file]} {
         gets $tmp_file line
         if {[string range $line 0 0] != "#"} {
	     if {$setup == [lindex $line 0]} {
               if {[llength $line] != 0} {
                 if {[llength $line] == 2} {
                   set num 1
                 } else {
                   set num [lindex $line 2]
                 }

                 set setup [lindex $line 0]
                 set tc [lindex $line 1]
                 set max [expr $num+2]
                 #puts "processing $line - found setup = $setup, tc = $tc, num = $num, max = $max"              
                 for {set repeat 3} {$repeat &lt;=$max} {incr repeat} {
                          #xputs "processing repeat = $repeat"
                   set seed [lindex $line $repeat]
                   if {$seed == ""} {
              #       puts "Found no spec of seed, using random"   
                      set seed random
                   }
                #  puts "seed = $seed"
                   lappend tclist [format "%s:%s:%d" $tc $seed [expr $repeat-2]]
              }
            }
          }
      }

     }



      close $tmp_file
      #xputs "returning $tclist"

      return $tclist
   }


   <!-- get_all_setups: This tcl procedure will extract all setups from the tc spec file -->


proc get_all_setups {file_name} {
     set tclist ""
      set tmp_file [open $file_name r]
      while {![eof $tmp_file]} {
         gets $tmp_file line
         if {[string range $line 0 0] != "#"} {
	     # Lines containing ":" are note test cases
	     if {[string match "*:*" $line]} {
#		 puts "Found common argument for a setup"
	     } else {
            if {[llength $line] != 0} {
		set setup [lindex $line 0]
		lappend tclist $setup
	    }
	 }
      }
      }
      close $tmp_file
    set tclist [lsort -u $tclist]
#    puts "returning $tclist"
      return $tclist
   }


   <!-- get_setup_from_context: This tcl procedure will extract all setups from the tc spec file -->

proc get_setup_from_context {context} {
#echo "checking $context"
set r [lindex [split [lindex [split $context "/"] end-2] "~"] 1]
#echo "Returning $r"
return $r
}

   <!-- get_extra_args: This tcl procedure will extract extra arguments from the tc spec file -->
# This procedure looks for extra compile arguments 
# Look for lines starting with
proc get_extra_args {file_name setup args} {
   set vlog_args_list ""
   set tmp_file [open $file_name r]
   while {![eof $tmp_file]} {
      gets $tmp_file line
      if {[regexp "^$setup:$args=(.+)$" $line all vlog_args]} {
         close $tmp_file
         return $vlog_args
      }
   }
   close $tmp_file
   return ""
}







  </usertcl>
</rmdb>
