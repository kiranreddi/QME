# These variables will be updated by the create simdir script
BLOCKNAME=___REPLACE_THIS_BLOCKNAME
BLOCK_OVERRIDES=___REPLACE_THIS_BLOCK_OVERRIDES
SRCHOME=___REPLACE_THIS_SRCHOME

################################################################
# Base settings
################################################################
include ${QME_HOME}/templates/Makefile.base

################################################################
# Site Overrides
# Using this is optional. But allowes for common site settings
################################################################
-include ${QME_SITE_SETTINGS}/Makefile.site.defaults
################################################################
# Project Overrides, optional
################################################################
-include ${QME_PROJECT_HOME}/qme_setup/Makefile.project.defaults

################################################################
# Block Overrides (Required)
################################################################
include ${BLOCK_OVERRIDES}
##############################################################
# Include all relations that are calculated
##############################################################
include ${QME_HOME}/templates/Makefile.relations
include ${QME_HOME}/templates/Makefile.help


################################################################
# Targets
################################################################

# clean out
default::help


compile: clean ${COMPILE_UVM_TARGET} compile_qvips compile_dut compile_tb liblist


clean::
	rm -rf ${LIBRARY_HOME}
	rm -rf ${TESTCASE_DIR}
	rm -f *.wlf
	rm -f transcript
	rm -f *.dbg
	rm -f modelsim.ini
	rm -f ${LIBLIST}


# Recompile UVM to catch timescale problem
compile_uvm::
	@echo "Recompiling uvm library UVM_VERSION ${UVM_VERSION} with timescale VLOG_TIMESCALE=${VLOG_TIMESCALE}";
	@test -d ${QUESTALIBS_DIR}||mkdir ${QUESTALIBS_DIR}
	@test -d ${QUESTALIBS_DIR}/${UVM_VERSION}||vlib ${QUESTALIBS_DIR}/${UVM_VERSION}
	@vmap mtiUvm ${PWD}/${QUESTALIBS_DIR}/${UVM_VERSION}
	${VLOG} -work mtiUvm ${UVM_HOME}/src/uvm_pkg.sv ${UVM_HOME}/src/dpi/uvm_dpi.cc  \
	${UVM_INC_DIR} ${VLOG_TIMESCALE}  +define+UVM_DEBUGGER ${QUESTA_HOME}/verilog_src/${QUESTA_UVM_DEBUG}/src/questa_uvm_pkg.sv \
	+incdir+${QUESTA_HOME}/verilog_src/${QUESTA_UVM_DEBUG}/src/
	${VLOG} -work mtiUvm ${QUESTA_HOME}/verilog_src/${UVM_VERSION}/src/dpi/uvm_dpi.cc -${ARCH} ${DPI_GCC_VERSION}

compile_qvips::${QVIP_COMMON} ${QVIP_TARGETS}

compile_dut::prepare_filelist_dut
	${COMPILE_SCRIPT} -file ${DUT_FILELIST} ${DUT_COMPILE_SCRIPT_ARGUMENTS} ${X_VLOG_ARGS} ${X_VCOM_ARGS}

compile_tb::prepare_filelist_tb
	${COMPILE_SCRIPT} -file ${TB_FILELIST} ${TB_COMPILE_SCRIPT_ARGUMENTS} -vlogargs=${UVM_INC_DIR} ${SETUPARGS} ${X_VLOG_ARGS} ${X_VCOM_ARGS}


#########################################################
# Optimize tb ,used in chip level and regressions
#########################################################
opt:opt_fast opt_dbg

opt_fast:
	${DISABLE_VERDI_PLI};${VOPT} -work $(TB_LIB_NAME) $(TB_TOP_NAME) -l vopt_fast.log \
	-o $(TB_TOP_NAME)_opt -$(ARCH) $(VOPTSWITCHES) ${CC_OPT_ARGS} ${X_OPT_ARGS} -f ${LIBLIST} -time

opt_dbg:
	${DISABLE_VERDI_PLI};${VOPT} -work $(TB_LIB_NAME) $(TB_TOP_NAME) -l vopt_dbg.log \
	-o $(TB_TOP_NAME)_dbg -$(ARCH) $(VOPTSWITCHES_BLOCK) ${CC_OPT_ARGS} ${X_OPT_ARGS} -f ${LIBLIST} -time ${DEBUG}


############  Simulation targets ########################
# Flow is different for chip level or block level
#########################################################

ifeq (${VERIFICATION_LEVEL},BLOCK)
# targets and switches used when you run on block level.
GUI_TARGET=gui_block
BATCH_TARGET=batch_block
else
GUI_TARGET=gui_chip
BATCH_TARGET=batch_chip
endif

batch::${BATCH_TARGET}
gui::${GUI_TARGET}

#########################################################
# Clean and prepare the run directory before starting the 
# new simulation
#########################################################

clean_rundir:
	@echo "Preparing ${RUNDIR} for simulation"
	@test -d ${RUNDIR}||mkdir -p ${RUNDIR}
	@cd ${RUNDIR};rm -f *.ucdb transcript *.wlf wlft* ${QUESTALIBS_DIR} modelsim.ini ${LIBLIST}
	@if test -e ${QUESTALIBS_DIR} ;then cd ${RUNDIR};ln -s ../${QUESTALIBS_DIR};fi
	@if test -e ${MODELSIM_INI} ;then cd ${RUNDIR};ln -s ../modelsim.ini;fi
	@if test -e ${LIBLIST} ;then cd ${RUNDIR};ln -s ../${LIBLIST};fi
#	@if test -e ${VSIM_SCRATCH_USER} ;then cd ${RUNDIR};ln -s ../${VSIM_SCRATCH_USER};fi


#########################################################
# Start a block level simulation, using built in vopt
#########################################################

gui_block:: liblist clean_rundir
	@echo "Launching GUI in directory called ${RUNDIR}"
	cd ${RUNDIR};${DISABLE_VERDI_PLI};export UCDBFILE=${UCDBFILE}; \
	${VSIM}  $(TB_LIB_NAME).$(TB_TOP_NAME) -$(ARCH) \
	${VSIM_TIMERES} \
	-f ${LIBLIST} \
	-lib $(TB_LIB_NAME) \
	${TIMINGCHECKS} \
	-printsimstats \
	-sv_seed ${SEED} \
	-msgmode both -onfinish stop  \
	${UVM_SIM_ARGS} \
	${VSIM_GCC_VERSION} \
	${DPI_GCC_VERSION} \
	${QUESTA_VIP_SIM_ARGS} \
	${UVMCONTROL} \
	${CLASSDEBUG} \
	${VSIMARGS} \
	${VSIMVOPTARGS} \
	${GUI_DO} \
	-gui \
	${EXTRA_VSIM_ARGS}  \
	${ASSERTION_DBG} \
	${SOLVEFAIL_ARGS}  \
	${POSTSIMDEBUG} \
	${DEBUG} \
	+UVM_TESTNAME=${TEST} \
	${FSMDEBUG} \
	+UVM_VERBOSITY=${UVM_VERBOSITY}

#########################################################
# Start a chip level simulation, using vopt separately
#########################################################

gui_chip:: liblist clean_rundir opt_dbg
	@echo "Launching GUI in directory called ${RUNDIR}"
	cd ${RUNDIR};${DISABLE_VERDI_PLI};export UCDBFILE=${UCDBFILE}; \
	${VSIM}  $(TB_LIB_NAME).$(TB_TOP_NAME)_dbg -$(ARCH) \
	${VSIM_TIMERES} \
	-f ${LIBLIST} \
	-lib $(TB_LIB_NAME) \
	${TIMINGCHECKS} \
	-printsimstats \
	-sv_seed ${SEED} \
	-msgmode both -onfinish stop  \
	${UVM_SIM_ARGS} \
	${VSIM_GCC_VERSION} \
	${DPI_GCC_VERSION} \
	${QUESTA_VIP_SIM_ARGS} \
	${UVMCONTROL} \
	${CLASSDEBUG} \
	${VSIMARGS} \
	${GUI_DO} \
	-gui \
	${EXTRA_VSIM_ARGS}  \
	${ASSERTION_DBG} \
	${SOLVEFAIL_ARGS}  \
	${POSTSIMDEBUG} \
	${DEBUG} \
	+UVM_TESTNAME=${TEST} \
	${FSMDEBUG} \
	+UVM_VERBOSITY=${UVM_VERBOSITY}

#########################################################
# Start a block level simulation, using built in vopt
#########################################################

batch_block:: liblist clean_rundir
	@echo "Launching batch in directory called ${RUNDIR}"
	cd ${RUNDIR};${DISABLE_VERDI_PLI};export UCDBFILE=${UCDBFILE}; \
	${VSIM}  $(TB_LIB_NAME).$(TB_TOP_NAME) -$(ARCH) \
	${VSIM_TIMERES} \
	-f ${LIBLIST} \
	-lib $(TB_LIB_NAME) \
	${TIMINGCHECKS} \
	-printsimstats \
	-sv_seed ${SEED} \
	-msgmode both -onfinish stop  \
	${UVM_SIM_ARGS} \
	${VSIM_GCC_VERSION} \
	${DPI_GCC_VERSION} \
	${QUESTA_VIP_SIM_ARGS} \
	${UVMCONTROL} \
	${CLASSDEBUG} \
	${VSIMARGS} \
	${VSIMVOPTARGS} \
	${REGRESSION_DO} \
	-c \
	${EXTRA_VSIM_ARGS}  \
	${ASSERTION_DBG} \
	${SOLVEFAIL_ARGS}  \
	${POSTSIMDEBUG} \
	${DEBUG} \
	+UVM_TESTNAME=${TEST} \
	${FSMDEBUG} \
	+UVM_VERBOSITY=${UVM_VERBOSITY}

#########################################################
# Start a chip level simulation, using vopt separately
#########################################################

batch_chip:: liblist clean_rundir opt_dbg
	@echo "Launching batch in directory called ${RUNDIR}"
	cd ${RUNDIR};${DISABLE_VERDI_PLI};export UCDBFILE=${UCDBFILE}; \
	${VSIM}  $(TB_LIB_NAME).$(TB_TOP_NAME)_dbg -$(ARCH) \
	${VSIM_TIMERES} \
	-f ${LIBLIST} \
	-lib $(TB_LIB_NAME) \
	${TIMINGCHECKS} \
	-printsimstats \
	-sv_seed ${SEED} \
	-msgmode both -onfinish stop  \
	${UVM_SIM_ARGS} \
	${VSIM_GCC_VERSION} \
	${DPI_GCC_VERSION} \
	${QUESTA_VIP_SIM_ARGS} \
	${UVMCONTROL} \
	${CLASSDEBUG} \
	${VSIMARGS} \
	${REGRESSION_DO} \
	-c \
	${EXTRA_VSIM_ARGS}  \
	${ASSERTION_DBG} \
	${SOLVEFAIL_ARGS}  \
	${POSTSIMDEBUG} \
	${DEBUG} \
	+UVM_TESTNAME=${TEST} \
	${FSMDEBUG} \
	+UVM_VERBOSITY=${UVM_VERBOSITY}


############# Regression Targets ########################
# Used as first target when running regression
#########################################################
# Start a simulation in regression, vopt is done before
#########################################################

batch_regression:: liblist 
	${DISABLE_VERDI_PLI};export UCDBFILE=${UCDBFILE}; \
	${VSIM}  $(TB_LIB_NAME).$(TB_TOP_NAME)_opt -$(ARCH) \
	${VSIM_TIMERES} \
	-f ${LIBLIST} \
	-lib $(TB_LIB_NAME) \
	${TIMINGCHECKS} \
	-quiet \
	-printsimstats \
	-sv_seed ${SEED} \
	-msgmode both -onfinish stop  \
	${UVM_SIM_ARGS} \
	${VSIM_GCC_VERSION} \
	${DPI_GCC_VERSION} \
	${QUESTA_VIP_SIM_ARGS} \
	${UVMCONTROL_REGR} \
	${VSIMARGS} \
	${REGRESSION_DO} \
	-c \
	${EXTRA_VSIM_ARGS}  \
	${CC_COLLECT} \
	-assertdebug \
	+UVM_TESTNAME=${TEST} \
	+UVM_VERBOSITY=${UVM_VERBOSITY_REGR}
#########################################################
# When rerunning a simulation due to failure
#########################################################
# Start a simulation in regression with debug, vopt is done before
#########################################################

batch_regression_dbg:: liblist
	${DISABLE_VERDI_PLI};export UCDBFILE=${UCDBFILE}; \
	${VSIM}  $(TB_LIB_NAME).$(TB_TOP_NAME)_dbg -$(ARCH) \
	${VSIM_TIMERES} \
	-f ${LIBLIST} \
	-lib $(TB_LIB_NAME) \
	${TIMINGCHECKS} \
	-printsimstats \
	-sv_seed ${SEED} \
	-msgmode both -onfinish stop  \
	${UVM_SIM_ARGS} \
	${VSIM_GCC_VERSION} \
	${DPI_GCC_VERSION} \
	${QUESTA_VIP_SIM_ARGS} \
	${UVMCONTROL} \
	${CLASSDEBUG} \
	${VSIMARGS} \
	${REGRESSION_DBG_DO} \
	-c \
	${EXTRA_VSIM_ARGS}  \
	${ASSERTION_DBG} \
	${SOLVEFAIL_ARGS}  \
	${POSTSIMDEBUG} \
	${DEBUG} \
	+UVM_TESTNAME=${TEST} \
	${FSMDEBUG} \
	+UVM_VERBOSITY=${UVM_VERBOSITY}

#########################################################
# Preparing a project file containing all the switches
# Note. Makes it easier to pick upp a regression
#########################################################
create_project_file::
	@echo "Starting to execute target $@";
	@rm -f default.vrm
	@test -e default.vrm||echo "VRMSTART">default.vrm;\
	        echo "VRM::Version 1">>default.vrm; \
	        echo "VRM::AddRmdb ${RMDBFILE}" >> default.vrm; \
	        echo "VRMEND" >> default.vrm;
	@sed s/VRMEND//g default.vrm > default.vrm.tmp
	@echo "VRM::AddConfiguration ${RMDBFILE} {${BLOCKNAME}_regression} {{I my_run}} {-clean -GBLOCKNAME=${BLOCKNAME} \
	${TIMEOUTARGS} ${NOREUSESEEDS} \
	-GTCSPEC=${TC_SPEC} \
	-GMERGE_HOME=${MERGED_UCDB_HOME} \
	-GREPORTS_HOME=${HTML_REPORTS_HOME} \
	-GHTML_REPORTDIR=${HTML_REPORTS_HOME} \
	-GGRID=${GRID_ENGINE} \
	-GMAX_PARALLEL_JOBS=${MAX_PARALLEL_JOBS} \
	-GRANKING=${RANKING} \
	-GCOVERCHECK=${COVERCHECK} \
	-GAUTOCHECK=${AUTOCHECK} \
	-GFORMAL=${FORMAL} \
	-GCDC_STATIC=${CDC_STATIC} \
	-GTIMESTAMP=${TIMESTAMP} \
	-GREQUIRE_VPLAN=${REQUIRE_VPLAN} \
	-GSEND_EMAIL=${SEND_EMAIL} \
	-vrmdata ${SCRATCHDIR}}" >> default.vrm.tmp 
	@echo "VRMEND" >> default.vrm.tmp;
	@mv default.vrm.tmp  default.vrm

check_prereq::
	@test -d transformrule.txt||touch transformrule.txt
	@test -d ${MERGED_UCDB_HOME}||mkdir -p ${MERGED_UCDB_HOME}	
	@test -d ${HTML_REPORTS_HOME}||mkdir -p ${HTML_REPORTS_HOME}	
	@if [ -f $(TC_SPEC) ]; then \
	  echo "INFO: Found ${TC_SPEC} - (OK)"; \
	else \
	  echo ""; \
	  echo "**************************************************"; \
	  echo "REGRESSION_SETUP_ERROR: Did not find ${TC_SPEC}, creating one!"; \
	  echo "Do not forget that you need to update ${TC_SPEC}"; \
	  echo "with tests to run"; \
	  echo "**************************************************"; \
	  echo ""; \
	  echo "DEFAULT_SETUP my_test 10 random" > ${TC_SPEC}; \
	fi;


regression:: check_prereq create_project_file
	vrun -gui -verbose -project default.vrm -rmdb ${RMDBFILE} ${REGRESSION_ARGS}


############# Formal tools ##############################

#########################################################
# Extract generics for a design. TB can override generics
# This is necessary for covercheck
#########################################################

get_generics:: compile get_generics_only

get_generics_only:
	${DISABLE_VERDI_PLI};${VSIM} -c $(TB_LIB_NAME).$(TB_TOP_NAME) \
	-quiet -$(ARCH)  ${VSIMSWITCHES} ${UVMCONTROL_REGR} ${VSIMARGS} \
	${X_SIM_ARGS} \
        -do "do ${QME_HOME}/dofiles/get_generics.do ${BLOCKNAME}" \
	-voptargs="+acc" ${QUESTA_VIP_SIM_ARGS} ${VSIM_GCC_VERSION} -f ${LIBLIST} 
	@echo "We have now a file called generics.txt that contains all top level generics"

#########################################################
# Run Questa Autocheck
# Intended to be run interactively.
# Should not be run as regression. Missing UCDB storage
#########################################################

autocheck::clean compile_dut liblist autocheck_only
autocheck_only::
	${DISABLE_VERDI_PLI}; \
	qautocheck -c -licq -od ${AUTOCHECK_RESULTS} -do "configure license queue on; \
	${AUTOCHECK_DO_COMMAND}; \
	autocheck run -d ${AUTOCHECK_DUT} \
	-work ${AUTOCHECK_DESIGN_LIB} \
	-effort ${AUTOCHECK_EFFORT} -f ${LIBLIST}  ${AUTOCHECK_GENERICS} ${AUTOCHECK_EXTRA_ARGS}; exit"

#########################################################
# Run Questa Covercheck
# Can be run as part of regression or interactively
#########################################################
covercheck: compile covercheck_only

covercheck_only:
	${DISABLE_VERDI_PLI};qautocheck -c -licq -od ${COVERCHECK_RESULTS} -do "\
	configure license queue on;\
	${DISABLE_COVERCHECKS};\
	${COVERCHECK_DO_COMMANDS}; \
	covercheck load ucdb ${COVERCHECK_UCDB}; \
	covercheck compile -d ${COVERCHECK_DUT} -work ${COVERCHECK_DESIGN_LIB} -f ${LIBLIST} ${COVERCHECK_GENERICS} ${COVERCHECK_EXTRA_COMPILE_ARGS}; \
	covercheck verify -effort ${COVERCHECK_EFFORT}  ${COVERCHECK_WITNESS_WAVEFORM} ${COVERCHECK_EXTRA_VERIFY_ARGS} -byinstance; \
	covercheck generate exclude ${COVERCHECK_RESULTS}/covercheck_verify.db \
	covercheck_exclude.do ; \
	exit"

#########################################################
# Run Questa CDC
# Can be run as part of regression or interactively
#########################################################





##########################################################





