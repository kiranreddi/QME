//----------------------------------------------------------------------
//   THIS IS AUTOMATICALLY GENERATED CODE
//   Generated by Mentor Graphics' Register Assistant UVM V4.4 (Build 1)
//   UVM Register Kit version 1.1
//----------------------------------------------------------------------
// Project         : registers
// Unit            : i2c_master_uvm_reg
// File            : i2c_master_uvm_reg.sv
//----------------------------------------------------------------------
// Created by      : mikaela
// Creation Date   : 4/16/14 2:43 PM
//----------------------------------------------------------------------
// Title           : registers
//
// Description     : 
//
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// i2c_master_uvm_reg
//----------------------------------------------------------------------
package i2c_master_uvm_reg;

   import uvm_pkg::*;

   `include "uvm_macros.svh"

   /* DEFINE REGISTER CLASSES */



   //--------------------------------------------------------------------
   // Class: CR_REG_reg
   // 
   // Command Register
   //--------------------------------------------------------------------

   class CR_REG_reg extends uvm_reg;
      `uvm_object_utils(CR_REG_reg)

      rand uvm_reg_field STA; // Generate start condition
      rand uvm_reg_field STO; // Generate stop condition
      rand uvm_reg_field RD; // Read from Slave
      rand uvm_reg_field WR; // Write to slave
      rand uvm_reg_field ACK; // ACK, when a receiver, sent ACK (ACK = ‘0’) or NACK (ACK = ‘1’)
      rand uvm_reg_field IACK; // IACK, Interrupt acknowledge. When set, clears a pending interrupt.


      // Function: coverage
      // 
      covergroup cg_vals;
         STA	 : coverpoint STA.value[0];
         STO	 : coverpoint STO.value[0];
         RD	 : coverpoint RD.value[0];
         WR	 : coverpoint WR.value[0];
         ACK	 : coverpoint ACK.value[0];
         IACK	 : coverpoint IACK.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "CR_REG_reg");
         super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         STA = uvm_reg_field::type_id::create("STA");
         STO = uvm_reg_field::type_id::create("STO");
         RD = uvm_reg_field::type_id::create("RD");
         WR = uvm_reg_field::type_id::create("WR");
         ACK = uvm_reg_field::type_id::create("ACK");
         IACK = uvm_reg_field::type_id::create("IACK");

         STA.configure(this, 1, 7, "RW", 0, 1'b0, 1, 1, 0);
         STO.configure(this, 1, 6, "RW", 0, 1'b0, 1, 1, 0);
         RD.configure(this, 1, 5, "RW", 0, 1'b0, 1, 1, 0);
         WR.configure(this, 1, 4, "RW", 0, 1'b0, 1, 1, 0);
         ACK.configure(this, 1, 3, "RW", 0, 1'b0, 1, 1, 0);
         IACK.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: PRER_HI_REG_reg
   // 
   // Clock Prescale register (High)
   //--------------------------------------------------------------------

   class PRER_HI_REG_reg extends uvm_reg;
      `uvm_object_utils(PRER_HI_REG_reg)

      rand uvm_reg_field PRESCALE_HI; 


      // Function: new
      // 
      function new(string name = "PRER_HI_REG_reg");
         super.new(name, 8, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         PRESCALE_HI = uvm_reg_field::type_id::create("PRESCALE_HI");

         PRESCALE_HI.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: PRER_LO_REG_reg
   // 
   // Clock Prescale register (LOW)
   //--------------------------------------------------------------------

   class PRER_LO_REG_reg extends uvm_reg;
      `uvm_object_utils(PRER_LO_REG_reg)

      rand uvm_reg_field PRESCALE_LO; 


      // Function: new
      // 
      function new(string name = "PRER_LO_REG_reg");
         super.new(name, 8, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         PRESCALE_LO = uvm_reg_field::type_id::create("PRESCALE_LO");

         PRESCALE_LO.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: SR_REG_reg
   // 
   // Status Register
   //--------------------------------------------------------------------

   class SR_REG_reg extends uvm_reg;
      `uvm_object_utils(SR_REG_reg)

      uvm_reg_field RXACK; 
      uvm_reg_field BUSY; 
      uvm_reg_field TIP; 
      uvm_reg_field IF; 


      // Function: coverage
      // 
      covergroup cg_vals;
         RXACK	 : coverpoint RXACK.value[0];
         BUSY	 : coverpoint BUSY.value[0];
         TIP	 : coverpoint TIP.value[0];
         IF	 : coverpoint IF.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "SR_REG_reg");
         super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         RXACK = uvm_reg_field::type_id::create("RXACK");
         BUSY = uvm_reg_field::type_id::create("BUSY");
         TIP = uvm_reg_field::type_id::create("TIP");
         IF = uvm_reg_field::type_id::create("IF");

         RXACK.configure(this, 1, 7, "RO", 0, 1'b0, 1, 0, 0);
         BUSY.configure(this, 1, 6, "RO", 0, 1'b0, 1, 0, 0);
         TIP.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         IF.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: TXR_REG_reg
   // 
   // Transmit register
   //--------------------------------------------------------------------

   class TXR_REG_reg extends uvm_reg;
      `uvm_object_utils(TXR_REG_reg)

      rand uvm_reg_field TXDATA; // Byte to transmit (see full description)


      // Function: new
      // 
      function new(string name = "TXR_REG_reg");
         super.new(name, 8, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         TXDATA = uvm_reg_field::type_id::create("TXDATA");

         TXDATA.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: CTR_REG_reg
   // 
   // Control register
   //--------------------------------------------------------------------

   class CTR_REG_reg extends uvm_reg;
      `uvm_object_utils(CTR_REG_reg)

      rand uvm_reg_field EN; 
      rand uvm_reg_field IEN; 
      uvm_reg_field RESERVED; 


      // Function: new
      // 
      function new(string name = "CTR_REG_reg");
         super.new(name, 8, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         EN = uvm_reg_field::type_id::create("EN");
         IEN = uvm_reg_field::type_id::create("IEN");
         RESERVED = uvm_reg_field::type_id::create("RESERVED");

         EN.configure(this, 1, 7, "RW", 0, 1'b0, 1, 1, 0);
         IEN.configure(this, 1, 6, "RW", 0, 1'b0, 1, 1, 0);
         RESERVED.configure(this, 6, 0, "RW", 0, 6'b000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: RXR_REG_reg
   // 
   // Receive Register
   //--------------------------------------------------------------------

   class RXR_REG_reg extends uvm_reg;
      `uvm_object_utils(RXR_REG_reg)

      uvm_reg_field RXDATA; // Received data


      // Function: new
      // 
      function new(string name = "RXR_REG_reg");
         super.new(name, 8, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RXDATA = uvm_reg_field::type_id::create("RXDATA");

         RXDATA.configure(this, 8, 0, "RO", 0, 8'h00, 1, 0, 1);
      endfunction
   endclass




   /* BLOCKS */



   //--------------------------------------------------------------------
   // Class: default_top_block
   // 
   //--------------------------------------------------------------------

   class default_top_block extends uvm_reg_block;
      `uvm_object_utils(default_top_block)

      rand PRER_LO_REG_reg PRER_LO_REG; // Clock Prescale register (LOW)
      rand PRER_HI_REG_reg PRER_HI_REG; // Clock Prescale register (High)
      rand CTR_REG_reg CTR_REG; // Control register
      rand RXR_REG_reg RXR_REG; // Receive Register
      rand SR_REG_reg SR_REG; // Status Register
      rand TXR_REG_reg TXR_REG; // Transmit register
      rand CR_REG_reg CR_REG; // Command Register

      uvm_reg_map default_top_block_map; 


      // Function: new
      // 
      function new(string name = "default_top_block");
         super.new(name, build_coverage(UVM_CVR_ALL));
      endfunction


      // Function: build
      // 
      virtual function void build();
         PRER_LO_REG = PRER_LO_REG_reg::type_id::create("PRER_LO_REG");
         PRER_LO_REG.configure(this);
         PRER_LO_REG.build();

         PRER_HI_REG = PRER_HI_REG_reg::type_id::create("PRER_HI_REG");
         PRER_HI_REG.configure(this);
         PRER_HI_REG.build();

         CTR_REG = CTR_REG_reg::type_id::create("CTR_REG");
         CTR_REG.configure(this);
         CTR_REG.build();

         RXR_REG = RXR_REG_reg::type_id::create("RXR_REG");
         RXR_REG.configure(this);
         RXR_REG.build();

         SR_REG = SR_REG_reg::type_id::create("SR_REG");
         SR_REG.configure(this);
         SR_REG.build();

         TXR_REG = TXR_REG_reg::type_id::create("TXR_REG");
         TXR_REG.configure(this);
         TXR_REG.build();

         CR_REG = CR_REG_reg::type_id::create("CR_REG");
         CR_REG.configure(this);
         CR_REG.build();

         default_top_block_map = create_map("default_top_block_map", 'h0, 1, UVM_LITTLE_ENDIAN);
         default_map = default_top_block_map;

         default_top_block_map.add_reg(PRER_LO_REG, 'h0, "RW");
         default_top_block_map.add_reg(PRER_HI_REG, 'h1, "RW");
         default_top_block_map.add_reg(CTR_REG, 'h2, "RW");
         default_top_block_map.add_reg(RXR_REG, 'h3, "RO");
         default_top_block_map.add_reg(SR_REG, 'h5, "RO");
         default_top_block_map.add_reg(TXR_REG, 'h6, "RW");
         default_top_block_map.add_reg(CR_REG, 'h4, "RW");

         lock_model();
      endfunction
   endclass


endpackage
