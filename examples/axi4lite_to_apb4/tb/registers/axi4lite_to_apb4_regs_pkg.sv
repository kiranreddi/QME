//----------------------------------------------------------------------
//   THIS IS AUTOMATICALLY GENERATED CODE
//   Generated by Mentor Graphics' Register Assistant UVM V4.4 (Build 1)
//   UVM Register Kit version 1.1
//----------------------------------------------------------------------
// Project         : registers
// Unit            : axi4lite_to_apb4_regs_pkg
// File            : axi4lite_to_apb4_regs_pkg.sv
//----------------------------------------------------------------------
// Created by      : mikaela
// Creation Date   : 2/11/15 8:20 PM
//----------------------------------------------------------------------
// Title           : registers
//
// Description     : 
//
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// axi4lite_to_apb4_regs_pkg
//----------------------------------------------------------------------
package axi4lite_to_apb4_regs_pkg;

   import uvm_pkg::*;

   `include "uvm_macros.svh"

   /* DEFINE REGISTER CLASSES */



   //--------------------------------------------------------------------
   // Class: AXI4LITE_TO_APB4_SAMPLE_REG
   // 
   // Register of samples transactions
   //--------------------------------------------------------------------

   class AXI4LITE_TO_APB4_SAMPLE_REG extends uvm_reg;
      `uvm_object_utils(AXI4LITE_TO_APB4_SAMPLE_REG)

      uvm_reg_field REG; // Sample data


      // Function: new
      // 
      function new(string name = "AXI4LITE_TO_APB4_SAMPLE_REG");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         REG = uvm_reg_field::type_id::create("REG");

         REG.configure(this, 32, 0, "RO", 0, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: AXI4LITE_TO_APB4_MST_CONFIG_REG
   // 
   // Master config register
   //--------------------------------------------------------------------

   class AXI4LITE_TO_APB4_MST_CONFIG_REG extends uvm_reg;
      `uvm_object_utils(AXI4LITE_TO_APB4_MST_CONFIG_REG)

      rand uvm_reg_field WR_RD_RATIO; 


      // Function: new
      // 
      function new(string name = "AXI4LITE_TO_APB4_MST_CONFIG_REG");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         WR_RD_RATIO = uvm_reg_field::type_id::create("WR_RD_RATIO");

         WR_RD_RATIO.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: AXI4LITE_TO_APB4_SAMPLE_CONFIG_REG
   // 
   // Sample config register
   //--------------------------------------------------------------------

   class AXI4LITE_TO_APB4_SAMPLE_CONFIG_REG extends uvm_reg;
      `uvm_object_utils(AXI4LITE_TO_APB4_SAMPLE_CONFIG_REG)

      rand uvm_reg_field WADDR_ND; // sample waddr normal data
      rand uvm_reg_field WADDR_NI; // sample waddr normal instr
      rand uvm_reg_field WADDR_PD; // sample waddr privileged data
      rand uvm_reg_field WADDR_PI; // sample waddr privileged instr
      rand uvm_reg_field WDATA_ND; // sample wdata normal data
      rand uvm_reg_field WDATA_NI; // sample wdata normal instr
      rand uvm_reg_field WDATA_PD; // sample wdata privileged data
      rand uvm_reg_field WDATA_PI; // sample wdata privileged instr
      rand uvm_reg_field RADDR_ND; // sample raddr normal data
      rand uvm_reg_field RADDR_NI; // sample raddr normal instr
      rand uvm_reg_field RADDR_PD; // sample raddr privileged data
      rand uvm_reg_field RADDR_PI; // sample raddr privileged instr
      rand uvm_reg_field RDATA_ND; // sample rdata normal data
      rand uvm_reg_field RDATA_NI; // sample rdata normal instr
      rand uvm_reg_field RDATA_PD; // sample rdata privileged data
      rand uvm_reg_field RDATA_PI; // sample rdata privileged instr


      // Function: new
      // 
      function new(string name = "AXI4LITE_TO_APB4_SAMPLE_CONFIG_REG");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         WADDR_ND = uvm_reg_field::type_id::create("WADDR_ND");
         WADDR_NI = uvm_reg_field::type_id::create("WADDR_NI");
         WADDR_PD = uvm_reg_field::type_id::create("WADDR_PD");
         WADDR_PI = uvm_reg_field::type_id::create("WADDR_PI");
         WDATA_ND = uvm_reg_field::type_id::create("WDATA_ND");
         WDATA_NI = uvm_reg_field::type_id::create("WDATA_NI");
         WDATA_PD = uvm_reg_field::type_id::create("WDATA_PD");
         WDATA_PI = uvm_reg_field::type_id::create("WDATA_PI");
         RADDR_ND = uvm_reg_field::type_id::create("RADDR_ND");
         RADDR_NI = uvm_reg_field::type_id::create("RADDR_NI");
         RADDR_PD = uvm_reg_field::type_id::create("RADDR_PD");
         RADDR_PI = uvm_reg_field::type_id::create("RADDR_PI");
         RDATA_ND = uvm_reg_field::type_id::create("RDATA_ND");
         RDATA_NI = uvm_reg_field::type_id::create("RDATA_NI");
         RDATA_PD = uvm_reg_field::type_id::create("RDATA_PD");
         RDATA_PI = uvm_reg_field::type_id::create("RDATA_PI");

         WADDR_ND.configure(this, 1, 31, "RW", 0, 1'b0, 1, 1, 0);
         WADDR_NI.configure(this, 1, 30, "RW", 0, 1'b0, 1, 1, 0);
         WADDR_PD.configure(this, 1, 29, "RW", 0, 1'b0, 1, 1, 0);
         WADDR_PI.configure(this, 1, 28, "RW", 0, 1'b0, 1, 1, 0);
         WDATA_ND.configure(this, 1, 27, "RW", 0, 1'b0, 1, 1, 0);
         WDATA_NI.configure(this, 1, 26, "RW", 0, 1'b0, 1, 1, 0);
         WDATA_PD.configure(this, 1, 25, "RW", 0, 1'b0, 1, 1, 0);
         WDATA_PI.configure(this, 1, 24, "RW", 0, 1'b0, 1, 1, 0);
         RADDR_ND.configure(this, 1, 23, "RW", 0, 1'b0, 1, 1, 0);
         RADDR_NI.configure(this, 1, 22, "RW", 0, 1'b0, 1, 1, 0);
         RADDR_PD.configure(this, 1, 21, "RW", 0, 1'b0, 1, 1, 0);
         RADDR_PI.configure(this, 1, 20, "RW", 0, 1'b0, 1, 1, 0);
         RDATA_ND.configure(this, 1, 19, "RW", 0, 1'b0, 1, 1, 0);
         RDATA_NI.configure(this, 1, 18, "RW", 0, 1'b0, 1, 1, 0);
         RDATA_PD.configure(this, 1, 17, "RW", 0, 1'b0, 1, 1, 0);
         RDATA_PI.configure(this, 1, 16, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: AXI4LITE_TO_APB4_AXI_STAT_REG
   // 
   // AXI Status register
   //--------------------------------------------------------------------

   class AXI4LITE_TO_APB4_AXI_STAT_REG extends uvm_reg;
      `uvm_object_utils(AXI4LITE_TO_APB4_AXI_STAT_REG)

      uvm_reg_field RD_CNT; 
      uvm_reg_field WR_CNT; 


      // Function: new
      // 
      function new(string name = "AXI4LITE_TO_APB4_AXI_STAT_REG");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RD_CNT = uvm_reg_field::type_id::create("RD_CNT");
         WR_CNT = uvm_reg_field::type_id::create("WR_CNT");

         RD_CNT.configure(this, 10, 10, "RC", 0, 10'b0000000000, 1, 0, 0);
         WR_CNT.configure(this, 10, 0, "RC", 0, 10'b0000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: AXI4LITE_TO_APB4_SLV_CONFIG_REG
   // 
   // Slave config register
   //--------------------------------------------------------------------

   class AXI4LITE_TO_APB4_SLV_CONFIG_REG extends uvm_reg;
      `uvm_object_utils(AXI4LITE_TO_APB4_SLV_CONFIG_REG)

      rand uvm_reg_field USE_MERR_RESP; 


      // Function: new
      // 
      function new(string name = "AXI4LITE_TO_APB4_SLV_CONFIG_REG");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         USE_MERR_RESP = uvm_reg_field::type_id::create("USE_MERR_RESP");

         USE_MERR_RESP.configure(this, 3, 0, "RW", 0, 3'b000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: AXI4LITE_TO_APB4_APB_STAT_REG
   // 
   // APB Status register
   //--------------------------------------------------------------------

   class AXI4LITE_TO_APB4_APB_STAT_REG extends uvm_reg;
      `uvm_object_utils(AXI4LITE_TO_APB4_APB_STAT_REG)

      uvm_reg_field RD_CNT; 
      uvm_reg_field WR_CNT; 


      // Function: new
      // 
      function new(string name = "AXI4LITE_TO_APB4_APB_STAT_REG");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         RD_CNT = uvm_reg_field::type_id::create("RD_CNT");
         WR_CNT = uvm_reg_field::type_id::create("WR_CNT");

         RD_CNT.configure(this, 10, 10, "RC", 0, 10'b0000000000, 1, 0, 0);
         WR_CNT.configure(this, 10, 0, "RC", 0, 10'b0000000000, 1, 0, 0);
      endfunction
   endclass




   /* BLOCKS */



   //--------------------------------------------------------------------
   // Class: axi4lite_to_apb4_registers_axi4lite_to_apb4_register_map_coverage
   // 
   // Coverage for the 'axi4lite_to_apb4_register_map' in 'axi4lite_to_apb4_registers'
   //--------------------------------------------------------------------

   class axi4lite_to_apb4_registers_axi4lite_to_apb4_register_map_coverage extends uvm_object;
      `uvm_object_utils(axi4lite_to_apb4_registers_axi4lite_to_apb4_register_map_coverage)

      covergroup ra_cov(string name) with function sample(uvm_reg_addr_t addr, bit is_read);

         option.per_instance = 1;
         option.name = name; 

         ADDR: coverpoint addr {
            bins AXI4LITE_TO_APB4_AXI_STAT = {'h0};
            bins AXI4LITE_TO_APB4_APB_STAT = {'h4};
            bins AXI4LITE_TO_APB4_SLV_CONFIG = {'h10};
            bins AXI4LITE_TO_APB4_MST_CONFIG = {'h20};
            bins AXI4LITE_TO_APB4_SAMPLE_CONFIG = {'hb60};
            bins AXI4LITE_TO_APB4_SAMPLE = {'hbac};
         }

         RW: coverpoint is_read {
            bins RD = {1};
            bins WR = {0};
         }

         ACCESS: cross ADDR, RW;

      endgroup: ra_cov

      function new(string name = "axi4lite_to_apb4_registers_axi4lite_to_apb4_register_map_coverage");
         ra_cov = new(name);
      endfunction: new

      function void sample(uvm_reg_addr_t offset, bit is_read);
         ra_cov.sample(offset, is_read);
      endfunction: sample

   endclass: axi4lite_to_apb4_registers_axi4lite_to_apb4_register_map_coverage



   //--------------------------------------------------------------------
   // Class: axi4lite_to_apb4_registers
   // 
   // Register block
   //--------------------------------------------------------------------

   class axi4lite_to_apb4_registers extends uvm_reg_block;
      `uvm_object_utils(axi4lite_to_apb4_registers)

      rand AXI4LITE_TO_APB4_AXI_STAT_REG AXI4LITE_TO_APB4_AXI_STAT; // AXI Status register
      rand AXI4LITE_TO_APB4_APB_STAT_REG AXI4LITE_TO_APB4_APB_STAT; // APB Status register
      rand AXI4LITE_TO_APB4_SLV_CONFIG_REG AXI4LITE_TO_APB4_SLV_CONFIG; // Slave config register
      rand AXI4LITE_TO_APB4_MST_CONFIG_REG AXI4LITE_TO_APB4_MST_CONFIG; // Master config register
      rand AXI4LITE_TO_APB4_SAMPLE_CONFIG_REG AXI4LITE_TO_APB4_SAMPLE_CONFIG; // Sample config register
      rand AXI4LITE_TO_APB4_SAMPLE_REG AXI4LITE_TO_APB4_SAMPLE; // Register of samples transactions

      uvm_reg_map axi4lite_to_apb4_register_map; 
      axi4lite_to_apb4_registers_axi4lite_to_apb4_register_map_coverage axi4lite_to_apb4_register_map_cg;


      // Function: new
      // 
      function new(string name = "axi4lite_to_apb4_registers");
         super.new(name, build_coverage(UVM_CVR_ALL));
      endfunction


      // Function: build
      // 
      virtual function void build();

         add_hdl_path("top.dut.u_csr_interface_apb");

         if(has_coverage(UVM_CVR_ADDR_MAP)) begin
            axi4lite_to_apb4_register_map_cg = axi4lite_to_apb4_registers_axi4lite_to_apb4_register_map_coverage::type_id::create("axi4lite_to_apb4_register_map_cg");
            axi4lite_to_apb4_register_map_cg.ra_cov.set_inst_name(this.get_full_name());
            void'(set_coverage(UVM_CVR_ADDR_MAP));
         end
         AXI4LITE_TO_APB4_AXI_STAT = AXI4LITE_TO_APB4_AXI_STAT_REG::type_id::create("AXI4LITE_TO_APB4_AXI_STAT");
         AXI4LITE_TO_APB4_AXI_STAT.configure(this);
         AXI4LITE_TO_APB4_AXI_STAT.build();

         AXI4LITE_TO_APB4_APB_STAT = AXI4LITE_TO_APB4_APB_STAT_REG::type_id::create("AXI4LITE_TO_APB4_APB_STAT");
         AXI4LITE_TO_APB4_APB_STAT.configure(this);
         AXI4LITE_TO_APB4_APB_STAT.build();

         AXI4LITE_TO_APB4_SLV_CONFIG = AXI4LITE_TO_APB4_SLV_CONFIG_REG::type_id::create("AXI4LITE_TO_APB4_SLV_CONFIG");
         AXI4LITE_TO_APB4_SLV_CONFIG.configure(this);
         AXI4LITE_TO_APB4_SLV_CONFIG.build();

         AXI4LITE_TO_APB4_MST_CONFIG = AXI4LITE_TO_APB4_MST_CONFIG_REG::type_id::create("AXI4LITE_TO_APB4_MST_CONFIG");
         AXI4LITE_TO_APB4_MST_CONFIG.configure(this);
         AXI4LITE_TO_APB4_MST_CONFIG.build();

         AXI4LITE_TO_APB4_SAMPLE_CONFIG = AXI4LITE_TO_APB4_SAMPLE_CONFIG_REG::type_id::create("AXI4LITE_TO_APB4_SAMPLE_CONFIG");
         AXI4LITE_TO_APB4_SAMPLE_CONFIG.configure(this);
         AXI4LITE_TO_APB4_SAMPLE_CONFIG.build();

         AXI4LITE_TO_APB4_SAMPLE = AXI4LITE_TO_APB4_SAMPLE_REG::type_id::create("AXI4LITE_TO_APB4_SAMPLE");
         AXI4LITE_TO_APB4_SAMPLE.configure(this);
         AXI4LITE_TO_APB4_SAMPLE.build();

         axi4lite_to_apb4_register_map = create_map("axi4lite_to_apb4_register_map", 'h0, 4, UVM_LITTLE_ENDIAN);
         default_map = axi4lite_to_apb4_register_map;

         axi4lite_to_apb4_register_map.add_reg(AXI4LITE_TO_APB4_AXI_STAT, 'h0, "RW");
         axi4lite_to_apb4_register_map.add_reg(AXI4LITE_TO_APB4_APB_STAT, 'h4, "RW");
         axi4lite_to_apb4_register_map.add_reg(AXI4LITE_TO_APB4_SLV_CONFIG, 'h10, "RW");
         axi4lite_to_apb4_register_map.add_reg(AXI4LITE_TO_APB4_MST_CONFIG, 'h20, "RW");
         axi4lite_to_apb4_register_map.add_reg(AXI4LITE_TO_APB4_SAMPLE_CONFIG, 'hb60, "RW");
         axi4lite_to_apb4_register_map.add_reg(AXI4LITE_TO_APB4_SAMPLE, 'hbac, "RW");

         lock_model();
      endfunction


      // Function: sample
      // 
      function void sample(uvm_reg_addr_t offset, bit is_read, uvm_reg_map  map);
         if(get_coverage(UVM_CVR_ADDR_MAP)) begin
            if(map.get_name() == "axi4lite_to_apb4_register_map") begin
               axi4lite_to_apb4_register_map_cg.sample(offset, is_read);
            end
         end
      endfunction: sample

   endclass


endpackage
