------------------------------------------------------------------------
--   THIS IS AUTOMATICALLY GENERATED CODE
--   Generated by Mentor Graphics' Register Assistant V4.5 (Build 2)
------------------------------------------------------------------------
-- Project         : axi4lite_to_apb4_proj
-- File            : /home/mikaela/questa_makefile_environment/examples/axi4lite_to_apb4/rtl/generated_rtl//axi4lite_to_apb4_registers.vhd
------------------------------------------------------------------------
-- Created by      : mikaela
-- Creation Date   : 12 02 2015 17:37::13
------------------------------------------------------------------------

------------------------------------------------------------------------
-- Block           : axi4lite_to_apb4_registers
-- Address Range   : 0xBB0
------------------------------------------------------------------------
-- Block Settings:
--    rtl.BUS_TYPE                 : NONE
--    rtl.CLOCK                    : clk
--    rtl.CLOCK_EDGE               : POSITIVE
--    rtl.DECLARE_INFERRED_SIGNALS : TRUE
--    rtl.DEFAULT_RDATA_NAME       : DEFAULT_RDATA
--    rtl.DEFAULT_RDATA_VALUE      : 0
--    rtl.DEFAULT_SCALAR_INPUT_TYPE: wire
--    rtl.DEFAULT_VECTOR_INPUT_TYPE: wire
--    rtl.LANGUAGE                 : VHDL_93
--    rtl.RESET                    : nreset
--    rtl.RESET_LEVEL              : LOW
--    rtl.RESET_STYLE              : ASYNC
------------------------------------------------------------------------

------------------------------------------------------------------------
ENTITY axi4lite_to_apb4_registers IS
------------------------------------------------------------------------
 PORT 
 (
  -- FIELD OUTPUT PORTS
  rd_cnt_axi4lite_to_apb4_axi_stat           : OUT BIT_VECTOR   (9 DOWNTO 0) ;
  wr_cnt_axi4lite_to_apb4_axi_stat           : OUT BIT_VECTOR   (9 DOWNTO 0) ;
  rd_cnt_axi4lite_to_apb4_apb_stat           : OUT BIT_VECTOR   (9 DOWNTO 0) ;
  wr_cnt_axi4lite_to_apb4_apb_stat           : OUT BIT_VECTOR   (9 DOWNTO 0) ;
  use_merr_resp_axi4lite_to_apb4_slv_config  : OUT BIT                       ;
  wr_rd_ratio_axi4lite_to_apb4_mst_config    : OUT BIT_VECTOR   (2 DOWNTO 0) ;
  waddr_nd_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  waddr_ni_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  waddr_pd_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  waddr_pi_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  wdata_nd_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  wdata_ni_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  wdata_pd_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  wdata_pi_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  raddr_nd_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  raddr_ni_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  raddr_pd_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  raddr_pi_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  rdata_nd_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  rdata_ni_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  rdata_pd_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  rdata_pi_axi4lite_to_apb4_sample_config    : OUT BIT                       ;
  data_axi4lite_to_apb4_sample               : OUT BIT_VECTOR   (31 DOWNTO 0);

  -- INPUT PORTS
  rd_cnt_axi4lite_to_apb4_axi_stat_ip           : IN wire   (9 DOWNTO 0) ;
  wr_cnt_axi4lite_to_apb4_axi_stat_ip           : IN wire   (9 DOWNTO 0) ;
  rd_cnt_axi4lite_to_apb4_apb_stat_ip           : IN wire   (9 DOWNTO 0) ;
  wr_cnt_axi4lite_to_apb4_apb_stat_ip           : IN wire   (9 DOWNTO 0) ;
  use_merr_resp_axi4lite_to_apb4_slv_config_ip  : IN wire                ;
  wr_rd_ratio_axi4lite_to_apb4_mst_config_ip    : IN wire   (2 DOWNTO 0) ;
  waddr_nd_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  waddr_ni_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  waddr_pd_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  waddr_pi_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  wdata_nd_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  wdata_ni_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  wdata_pd_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  wdata_pi_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  raddr_nd_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  raddr_ni_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  raddr_pd_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  raddr_pi_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  rdata_nd_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  rdata_ni_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  rdata_pd_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  rdata_pi_axi4lite_to_apb4_sample_config_ip    : IN wire                ;
  data_axi4lite_to_apb4_sample_ip               : IN wire   (31 DOWNTO 0);

  -- GENERIC BUS PORTS
  clk       : IN  wire                    ; -- Register Bus Clock
  nreset    : IN  wire                    ; -- Register Bus Reset
  waddr     : IN  wire       (11 DOWNTO 0); -- Write Address-Bus
  raddr     : IN  wire       (11 DOWNTO 0); -- Read Address-Bus
  wdata     : IN  wire       (31 DOWNTO 0); -- Write Data-Bus
  rdata     : OUT BIT_VECTOR (31 DOWNTO 0); -- Read Data-Bus
  rstrobe   : IN  wire                    ; -- Read-Strobe
  wstrobe   : IN  wire                    ; -- Write-Strobe
  raddrerr  : OUT BIT                     ; -- Read-Address-Error
  waddrerr  : OUT BIT                     ; -- Write-Address-Error
  wack      : OUT BIT                     ; -- Write Acknowledge
  rack      : OUT BIT                       -- Read Acknowledge
 );
END ENTITY axi4lite_to_apb4_registers;

------------------------------------------------------------------------
ARCHITECTURE axi4lite_to_apb4_registers_arch OF axi4lite_to_apb4_registers IS
------------------------------------------------------------------------
  -- READ/WRITE ENABLE SIGNALS
  SIGNAL ren_axi4lite_to_apb4_axi_stat       : BIT ;
  SIGNAL ren_axi4lite_to_apb4_apb_stat       : BIT ;
  SIGNAL wen_axi4lite_to_apb4_slv_config     : BIT ;
  SIGNAL wen_axi4lite_to_apb4_mst_config     : BIT ;
  SIGNAL wen_axi4lite_to_apb4_sample_config  : BIT ;

  -- MUX INPUTS FOR EACH REGISTER WITH READ ACCESS
  SIGNAL rmux_axi4lite_to_apb4_axi_stat       : wire  (31 DOWNTO 0);
  SIGNAL rmux_axi4lite_to_apb4_apb_stat       : wire  (31 DOWNTO 0);
  SIGNAL rmux_axi4lite_to_apb4_slv_config     : wire  (31 DOWNTO 0);
  SIGNAL rmux_axi4lite_to_apb4_mst_config     : wire  (31 DOWNTO 0);
  SIGNAL rmux_axi4lite_to_apb4_sample_config  : wire  (31 DOWNTO 0);
  SIGNAL rmux_axi4lite_to_apb4_sample         : wire  (31 DOWNTO 0);

  -- AUXILIARY SIGNALS
  SIGNAL rd_cnt_axi4lite_to_apb4_axi_stat_buf           : wire  (9 DOWNTO 0) ;
  SIGNAL wr_cnt_axi4lite_to_apb4_axi_stat_buf           : wire  (9 DOWNTO 0) ;
  SIGNAL rd_cnt_axi4lite_to_apb4_apb_stat_buf           : wire  (9 DOWNTO 0) ;
  SIGNAL wr_cnt_axi4lite_to_apb4_apb_stat_buf           : wire  (9 DOWNTO 0) ;
  SIGNAL use_merr_resp_axi4lite_to_apb4_slv_config_buf  : wire               ;
  SIGNAL wr_rd_ratio_axi4lite_to_apb4_mst_config_buf    : wire  (2 DOWNTO 0) ;
  SIGNAL waddr_nd_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL waddr_ni_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL waddr_pd_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL waddr_pi_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL wdata_nd_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL wdata_ni_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL wdata_pd_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL wdata_pi_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL raddr_nd_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL raddr_ni_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL raddr_pd_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL raddr_pi_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL rdata_nd_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL rdata_ni_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL rdata_pd_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL rdata_pi_axi4lite_to_apb4_sample_config_buf    : wire               ;
  SIGNAL data_axi4lite_to_apb4_sample_buf               : wire  (31 DOWNTO 0);

  -- DEFAULT VALUE FOR READ DATA BUS
  CONSTANT DEFAULT_RDATA : wire(31 DOWNTO 0) := (OTHERS => '0');

  -- ADDRESS PARAMETERS
  CONSTANT  AXI4LITE_TO_APB4_AXI_STAT_ADDR : wire := "000000000000"; -- 'h000
  CONSTANT  AXI4LITE_TO_APB4_APB_STAT_ADDR : wire := "000000000100"; -- 'h004
  CONSTANT  AXI4LITE_TO_APB4_SLV_CONFIG_ADDR : wire := "000000010000"; -- 'h010
  CONSTANT  AXI4LITE_TO_APB4_MST_CONFIG_ADDR : wire := "000000100000"; -- 'h020
  CONSTANT  AXI4LITE_TO_APB4_SAMPLE_CONFIG_ADDR : wire := "101101100000"; -- 'hB60
  CONSTANT  AXI4LITE_TO_APB4_SAMPLE_ADDR : wire := "101110101100"; -- 'hBAC

BEGIN
  ------------------------------------------------------------------------
  --                    WRITE ADDRESS DECODE
  ------------------------------------------------------------------------
  write_enable : PROCESS (waddr , wstrobe)
  BEGIN
    wen_axi4lite_to_apb4_slv_config <= '0';
    wen_axi4lite_to_apb4_mst_config <= '0';
    wen_axi4lite_to_apb4_sample_config <= '0';
    wack <= '0';
    waddrerr <= '0';

    IF (wstrobe = '1') THEN
      CASE waddr IS 
        WHEN AXI4LITE_TO_APB4_SLV_CONFIG_ADDR => 
          wen_axi4lite_to_apb4_slv_config <= '1';
        WHEN AXI4LITE_TO_APB4_MST_CONFIG_ADDR => 
          wen_axi4lite_to_apb4_mst_config <= '1';
        WHEN AXI4LITE_TO_APB4_SAMPLE_CONFIG_ADDR => 
          wen_axi4lite_to_apb4_sample_config <= '1';
        WHEN OTHERS => 
          waddrerr <= '1';
      END CASE;
      wack <= '1';
    END IF;
  END PROCESS write_enable;


  --------------------------------------------------------------
  -- Register: axi4lite_to_apb4_axi_stat_reg
  --   AXI Status register
  --   SW Access     : RO-Clear-On-Read
  --   Address Offset: 0x0
  --   HW Access     : read-write
  -- 
  -- Instance: axi4lite_to_apb4_axi_stat
  --   AXI Status register
  --   Address Offset: 0x000
  --   Reset Value   : 
  -- 
  -- Fields:
  --   19:10  rd_cnt (SW:RO-Clear-On-Read, HW:read-write)
  --   9:0  wr_cnt (SW:RO-Clear-On-Read, HW:read-write)

  --------------------------------------------------------------
  --   Field: rd_cnt                                        
  --   Width: 10                   , Offset: 10             
  --   SW Access: RO-Clear-On-Read , HW Access: read-write  
  --------------------------------------------------------------
  reg_axi4lite_to_apb4_axi_stat_reg_rd_cnt_axi4lite_to_apb4_axi_stat : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      rd_cnt_axi4lite_to_apb4_axi_stat_buf <= (OTHERS => '0');
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:RO-Clear-On-Read
      IF (ren_axi4lite_to_apb4_axi_stat = '1') THEN
        rd_cnt_axi4lite_to_apb4_axi_stat_buf <= (OTHERS => '0');
      -- HW:read-write
      ELSE
        rd_cnt_axi4lite_to_apb4_axi_stat_buf <= rd_cnt_axi4lite_to_apb4_axi_stat_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_axi_stat_reg_rd_cnt_axi4lite_to_apb4_axi_stat;

  -- Assign internal buffer value to output
  rd_cnt_axi4lite_to_apb4_axi_stat <= rd_cnt_axi4lite_to_apb4_axi_stat_buf;

  --------------------------------------------------------------
  --   Field: wr_cnt                                        
  --   Width: 10                   , Offset: 0              
  --   SW Access: RO-Clear-On-Read , HW Access: read-write  
  --------------------------------------------------------------
  reg_axi4lite_to_apb4_axi_stat_reg_wr_cnt_axi4lite_to_apb4_axi_stat : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      wr_cnt_axi4lite_to_apb4_axi_stat_buf <= (OTHERS => '0');
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:RO-Clear-On-Read
      IF (ren_axi4lite_to_apb4_axi_stat = '1') THEN
        wr_cnt_axi4lite_to_apb4_axi_stat_buf <= (OTHERS => '0');
      -- HW:read-write
      ELSE
        wr_cnt_axi4lite_to_apb4_axi_stat_buf <= wr_cnt_axi4lite_to_apb4_axi_stat_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_axi_stat_reg_wr_cnt_axi4lite_to_apb4_axi_stat;

  -- Assign internal buffer value to output
  wr_cnt_axi4lite_to_apb4_axi_stat <= wr_cnt_axi4lite_to_apb4_axi_stat_buf;


  --------------------------------------------------------------
  -- Register: axi4lite_to_apb4_apb_stat_reg
  --   APB Status register
  --   SW Access     : RO-Clear-On-Read
  --   Address Offset: 0x004
  --   HW Access     : read-write
  -- 
  -- Instance: axi4lite_to_apb4_apb_stat
  --   APB Status register
  --   Address Offset: 0x004
  --   Reset Value   : 
  -- 
  -- Fields:
  --   19:10  rd_cnt (SW:RO-Clear-On-Read, HW:read-write)
  --   9:0  wr_cnt (SW:RO-Clear-On-Read, HW:read-write)

  --------------------------------------------------------------
  --   Field: rd_cnt                                        
  --   Width: 10                   , Offset: 10             
  --   SW Access: RO-Clear-On-Read , HW Access: read-write  
  --------------------------------------------------------------
  reg_axi4lite_to_apb4_apb_stat_reg_rd_cnt_axi4lite_to_apb4_apb_stat : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      rd_cnt_axi4lite_to_apb4_apb_stat_buf <= (OTHERS => '0');
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:RO-Clear-On-Read
      IF (ren_axi4lite_to_apb4_apb_stat = '1') THEN
        rd_cnt_axi4lite_to_apb4_apb_stat_buf <= (OTHERS => '0');
      -- HW:read-write
      ELSE
        rd_cnt_axi4lite_to_apb4_apb_stat_buf <= rd_cnt_axi4lite_to_apb4_apb_stat_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_apb_stat_reg_rd_cnt_axi4lite_to_apb4_apb_stat;

  -- Assign internal buffer value to output
  rd_cnt_axi4lite_to_apb4_apb_stat <= rd_cnt_axi4lite_to_apb4_apb_stat_buf;

  --------------------------------------------------------------
  --   Field: wr_cnt                                        
  --   Width: 10                   , Offset: 0              
  --   SW Access: RO-Clear-On-Read , HW Access: read-write  
  --------------------------------------------------------------
  reg_axi4lite_to_apb4_apb_stat_reg_wr_cnt_axi4lite_to_apb4_apb_stat : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      wr_cnt_axi4lite_to_apb4_apb_stat_buf <= (OTHERS => '0');
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:RO-Clear-On-Read
      IF (ren_axi4lite_to_apb4_apb_stat = '1') THEN
        wr_cnt_axi4lite_to_apb4_apb_stat_buf <= (OTHERS => '0');
      -- HW:read-write
      ELSE
        wr_cnt_axi4lite_to_apb4_apb_stat_buf <= wr_cnt_axi4lite_to_apb4_apb_stat_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_apb_stat_reg_wr_cnt_axi4lite_to_apb4_apb_stat;

  -- Assign internal buffer value to output
  wr_cnt_axi4lite_to_apb4_apb_stat <= wr_cnt_axi4lite_to_apb4_apb_stat_buf;


  --------------------------------------------------------------
  -- Register: axi4lite_to_apb4_slv_config_reg
  --   Slave config register
  --   SW Access     : read-write
  --   Address Offset: 0x010
  --   HW Access     : read-write
  -- 
  -- Instance: axi4lite_to_apb4_slv_config
  --   Slave config register
  --   Address Offset: 0x010
  --   Reset Value   : 
  -- 
  -- Fields:
  --     0  use_merr_resp (SW:read-write, HW:read-write)

  --------------------------------------------------------------
  --   Field: use_merr_resp                           
  --   Width: 1              , Offset: 0              
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  reg_axi4lite_to_apb4_slv_config_reg_use_merr_resp_axi4lite_to_apb4_slv_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      use_merr_resp_axi4lite_to_apb4_slv_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_slv_config = '1') THEN
        use_merr_resp_axi4lite_to_apb4_slv_config_buf <= wdata(0);
      -- HW:read-write
      ELSE
        use_merr_resp_axi4lite_to_apb4_slv_config_buf <= use_merr_resp_axi4lite_to_apb4_slv_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_slv_config_reg_use_merr_resp_axi4lite_to_apb4_slv_config;

  -- Assign internal buffer value to output
  use_merr_resp_axi4lite_to_apb4_slv_config <= use_merr_resp_axi4lite_to_apb4_slv_config_buf;


  --------------------------------------------------------------
  -- Register: axi4lite_to_apb4_mst_config_reg
  --   Master config register
  --   SW Access     : read-write
  --   Address Offset: 0x020
  --   HW Access     : read-write
  -- 
  -- Instance: axi4lite_to_apb4_mst_config
  --   Master config register
  --   Address Offset: 0x020
  --   Reset Value   : 
  -- 
  -- Fields:
  --   2:0  wr_rd_ratio (SW:read-write, HW:read-write)

  --------------------------------------------------------------
  --   Field: wr_rd_ratio                             
  --   Width: 3              , Offset: 0              
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  reg_axi4lite_to_apb4_mst_config_reg_wr_rd_ratio_axi4lite_to_apb4_mst_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      wr_rd_ratio_axi4lite_to_apb4_mst_config_buf <= (OTHERS => '0');
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_mst_config = '1') THEN
        wr_rd_ratio_axi4lite_to_apb4_mst_config_buf <= wdata(2 DOWNTO 0);
      -- HW:read-write
      ELSE
        wr_rd_ratio_axi4lite_to_apb4_mst_config_buf <= wr_rd_ratio_axi4lite_to_apb4_mst_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_mst_config_reg_wr_rd_ratio_axi4lite_to_apb4_mst_config;

  -- Assign internal buffer value to output
  wr_rd_ratio_axi4lite_to_apb4_mst_config <= wr_rd_ratio_axi4lite_to_apb4_mst_config_buf;


  --------------------------------------------------------------
  -- Register: axi4lite_to_apb4_sample_config_reg
  --   Sample config register
  --   SW Access     : read-write
  --   Address Offset: 0xB60
  --   HW Access     : read-write
  -- 
  -- Instance: axi4lite_to_apb4_sample_config
  --   Sample config register
  --   Address Offset: 0xB60
  --   Reset Value   : 
  -- 
  -- Fields:
  --     31  waddr_nd (SW:read-write, HW:read-write)
  --     30  waddr_ni (SW:read-write, HW:read-write)
  --     29  waddr_pd (SW:read-write, HW:read-write)
  --     28  waddr_pi (SW:read-write, HW:read-write)
  --     27  wdata_nd (SW:read-write, HW:read-write)
  --     26  wdata_ni (SW:read-write, HW:read-write)
  --     25  wdata_pd (SW:read-write, HW:read-write)
  --     24  wdata_pi (SW:read-write, HW:read-write)
  --     23  raddr_nd (SW:read-write, HW:read-write)
  --     22  raddr_ni (SW:read-write, HW:read-write)
  --     21  raddr_pd (SW:read-write, HW:read-write)
  --     20  raddr_pi (SW:read-write, HW:read-write)
  --     19  rdata_nd (SW:read-write, HW:read-write)
  --     18  rdata_ni (SW:read-write, HW:read-write)
  --     17  rdata_pd (SW:read-write, HW:read-write)
  --     16  rdata_pi (SW:read-write, HW:read-write)

  --------------------------------------------------------------
  --   Field: waddr_nd                                
  --   Width: 1              , Offset: 31             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample waddr normal data
  --
  reg_axi4lite_to_apb4_sample_config_reg_waddr_nd_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      waddr_nd_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        waddr_nd_axi4lite_to_apb4_sample_config_buf <= wdata(31);
      -- HW:read-write
      ELSE
        waddr_nd_axi4lite_to_apb4_sample_config_buf <= waddr_nd_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_waddr_nd_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  waddr_nd_axi4lite_to_apb4_sample_config <= waddr_nd_axi4lite_to_apb4_sample_config_buf;

  --------------------------------------------------------------
  --   Field: waddr_ni                                
  --   Width: 1              , Offset: 30             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample waddr normal instr
  --
  reg_axi4lite_to_apb4_sample_config_reg_waddr_ni_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      waddr_ni_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        waddr_ni_axi4lite_to_apb4_sample_config_buf <= wdata(30);
      -- HW:read-write
      ELSE
        waddr_ni_axi4lite_to_apb4_sample_config_buf <= waddr_ni_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_waddr_ni_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  waddr_ni_axi4lite_to_apb4_sample_config <= waddr_ni_axi4lite_to_apb4_sample_config_buf;

  --------------------------------------------------------------
  --   Field: waddr_pd                                
  --   Width: 1              , Offset: 29             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample waddr privileged data
  --
  reg_axi4lite_to_apb4_sample_config_reg_waddr_pd_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      waddr_pd_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        waddr_pd_axi4lite_to_apb4_sample_config_buf <= wdata(29);
      -- HW:read-write
      ELSE
        waddr_pd_axi4lite_to_apb4_sample_config_buf <= waddr_pd_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_waddr_pd_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  waddr_pd_axi4lite_to_apb4_sample_config <= waddr_pd_axi4lite_to_apb4_sample_config_buf;

  --------------------------------------------------------------
  --   Field: waddr_pi                                
  --   Width: 1              , Offset: 28             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample waddr privileged instr
  --
  reg_axi4lite_to_apb4_sample_config_reg_waddr_pi_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      waddr_pi_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        waddr_pi_axi4lite_to_apb4_sample_config_buf <= wdata(28);
      -- HW:read-write
      ELSE
        waddr_pi_axi4lite_to_apb4_sample_config_buf <= waddr_pi_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_waddr_pi_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  waddr_pi_axi4lite_to_apb4_sample_config <= waddr_pi_axi4lite_to_apb4_sample_config_buf;

  --------------------------------------------------------------
  --   Field: wdata_nd                                
  --   Width: 1              , Offset: 27             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample wdata normal data
  --
  reg_axi4lite_to_apb4_sample_config_reg_wdata_nd_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      wdata_nd_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        wdata_nd_axi4lite_to_apb4_sample_config_buf <= wdata(27);
      -- HW:read-write
      ELSE
        wdata_nd_axi4lite_to_apb4_sample_config_buf <= wdata_nd_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_wdata_nd_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  wdata_nd_axi4lite_to_apb4_sample_config <= wdata_nd_axi4lite_to_apb4_sample_config_buf;

  --------------------------------------------------------------
  --   Field: wdata_ni                                
  --   Width: 1              , Offset: 26             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample wdata normal instr
  --
  reg_axi4lite_to_apb4_sample_config_reg_wdata_ni_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      wdata_ni_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        wdata_ni_axi4lite_to_apb4_sample_config_buf <= wdata(26);
      -- HW:read-write
      ELSE
        wdata_ni_axi4lite_to_apb4_sample_config_buf <= wdata_ni_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_wdata_ni_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  wdata_ni_axi4lite_to_apb4_sample_config <= wdata_ni_axi4lite_to_apb4_sample_config_buf;

  --------------------------------------------------------------
  --   Field: wdata_pd                                
  --   Width: 1              , Offset: 25             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample wdata privileged data
  --
  reg_axi4lite_to_apb4_sample_config_reg_wdata_pd_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      wdata_pd_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        wdata_pd_axi4lite_to_apb4_sample_config_buf <= wdata(25);
      -- HW:read-write
      ELSE
        wdata_pd_axi4lite_to_apb4_sample_config_buf <= wdata_pd_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_wdata_pd_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  wdata_pd_axi4lite_to_apb4_sample_config <= wdata_pd_axi4lite_to_apb4_sample_config_buf;

  --------------------------------------------------------------
  --   Field: wdata_pi                                
  --   Width: 1              , Offset: 24             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample wdata privileged instr
  --
  reg_axi4lite_to_apb4_sample_config_reg_wdata_pi_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      wdata_pi_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        wdata_pi_axi4lite_to_apb4_sample_config_buf <= wdata(24);
      -- HW:read-write
      ELSE
        wdata_pi_axi4lite_to_apb4_sample_config_buf <= wdata_pi_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_wdata_pi_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  wdata_pi_axi4lite_to_apb4_sample_config <= wdata_pi_axi4lite_to_apb4_sample_config_buf;

  --------------------------------------------------------------
  --   Field: raddr_nd                                
  --   Width: 1              , Offset: 23             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample raddr normal data
  --
  reg_axi4lite_to_apb4_sample_config_reg_raddr_nd_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      raddr_nd_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        raddr_nd_axi4lite_to_apb4_sample_config_buf <= wdata(23);
      -- HW:read-write
      ELSE
        raddr_nd_axi4lite_to_apb4_sample_config_buf <= raddr_nd_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_raddr_nd_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  raddr_nd_axi4lite_to_apb4_sample_config <= raddr_nd_axi4lite_to_apb4_sample_config_buf;

  --------------------------------------------------------------
  --   Field: raddr_ni                                
  --   Width: 1              , Offset: 22             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample raddr normal instr
  --
  reg_axi4lite_to_apb4_sample_config_reg_raddr_ni_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      raddr_ni_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        raddr_ni_axi4lite_to_apb4_sample_config_buf <= wdata(22);
      -- HW:read-write
      ELSE
        raddr_ni_axi4lite_to_apb4_sample_config_buf <= raddr_ni_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_raddr_ni_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  raddr_ni_axi4lite_to_apb4_sample_config <= raddr_ni_axi4lite_to_apb4_sample_config_buf;

  --------------------------------------------------------------
  --   Field: raddr_pd                                
  --   Width: 1              , Offset: 21             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample raddr privileged data
  --
  reg_axi4lite_to_apb4_sample_config_reg_raddr_pd_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      raddr_pd_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        raddr_pd_axi4lite_to_apb4_sample_config_buf <= wdata(21);
      -- HW:read-write
      ELSE
        raddr_pd_axi4lite_to_apb4_sample_config_buf <= raddr_pd_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_raddr_pd_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  raddr_pd_axi4lite_to_apb4_sample_config <= raddr_pd_axi4lite_to_apb4_sample_config_buf;

  --------------------------------------------------------------
  --   Field: raddr_pi                                
  --   Width: 1              , Offset: 20             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample raddr privileged instr
  --
  reg_axi4lite_to_apb4_sample_config_reg_raddr_pi_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      raddr_pi_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        raddr_pi_axi4lite_to_apb4_sample_config_buf <= wdata(20);
      -- HW:read-write
      ELSE
        raddr_pi_axi4lite_to_apb4_sample_config_buf <= raddr_pi_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_raddr_pi_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  raddr_pi_axi4lite_to_apb4_sample_config <= raddr_pi_axi4lite_to_apb4_sample_config_buf;

  --------------------------------------------------------------
  --   Field: rdata_nd                                
  --   Width: 1              , Offset: 19             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample rdata normal data
  --
  reg_axi4lite_to_apb4_sample_config_reg_rdata_nd_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      rdata_nd_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        rdata_nd_axi4lite_to_apb4_sample_config_buf <= wdata(19);
      -- HW:read-write
      ELSE
        rdata_nd_axi4lite_to_apb4_sample_config_buf <= rdata_nd_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_rdata_nd_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  rdata_nd_axi4lite_to_apb4_sample_config <= rdata_nd_axi4lite_to_apb4_sample_config_buf;

  --------------------------------------------------------------
  --   Field: rdata_ni                                
  --   Width: 1              , Offset: 18             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample rdata normal instr
  --
  reg_axi4lite_to_apb4_sample_config_reg_rdata_ni_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      rdata_ni_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        rdata_ni_axi4lite_to_apb4_sample_config_buf <= wdata(18);
      -- HW:read-write
      ELSE
        rdata_ni_axi4lite_to_apb4_sample_config_buf <= rdata_ni_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_rdata_ni_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  rdata_ni_axi4lite_to_apb4_sample_config <= rdata_ni_axi4lite_to_apb4_sample_config_buf;

  --------------------------------------------------------------
  --   Field: rdata_pd                                
  --   Width: 1              , Offset: 17             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample rdata privileged data
  --
  reg_axi4lite_to_apb4_sample_config_reg_rdata_pd_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      rdata_pd_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        rdata_pd_axi4lite_to_apb4_sample_config_buf <= wdata(17);
      -- HW:read-write
      ELSE
        rdata_pd_axi4lite_to_apb4_sample_config_buf <= rdata_pd_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_rdata_pd_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  rdata_pd_axi4lite_to_apb4_sample_config <= rdata_pd_axi4lite_to_apb4_sample_config_buf;

  --------------------------------------------------------------
  --   Field: rdata_pi                                
  --   Width: 1              , Offset: 16             
  --   SW Access: read-write , HW Access: read-write  
  --------------------------------------------------------------
  --   sample rdata privileged instr
  --
  reg_axi4lite_to_apb4_sample_config_reg_rdata_pi_axi4lite_to_apb4_sample_config : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      rdata_pi_axi4lite_to_apb4_sample_config_buf <= '0';
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- SW:read-write
      IF (wen_axi4lite_to_apb4_sample_config = '1') THEN
        rdata_pi_axi4lite_to_apb4_sample_config_buf <= wdata(16);
      -- HW:read-write
      ELSE
        rdata_pi_axi4lite_to_apb4_sample_config_buf <= rdata_pi_axi4lite_to_apb4_sample_config_ip;
      END IF;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_config_reg_rdata_pi_axi4lite_to_apb4_sample_config;

  -- Assign internal buffer value to output
  rdata_pi_axi4lite_to_apb4_sample_config <= rdata_pi_axi4lite_to_apb4_sample_config_buf;


  --------------------------------------------------------------
  -- Register: axi4lite_to_apb4_sample_reg
  --   Register of samples transactions
  --   SW Access     : read-only
  --   Address Offset: 0xBAC
  --   HW Access     : read-write
  -- 
  -- Instance: axi4lite_to_apb4_sample
  --   Register of samples transactions
  --   Address Offset: 0xBAC
  --   Reset Value   : 
  -- 
  -- Fields:
  --   31:0  data (SW:read-only, HW:read-write)

  --------------------------------------------------------------
  --   Field: data                                   
  --   Width: 32            , Offset: 0              
  --   SW Access: read-only , HW Access: read-write  
  --------------------------------------------------------------
  --   Sample data
  --
  reg_axi4lite_to_apb4_sample_reg_data_axi4lite_to_apb4_sample : PROCESS (clk, nreset)
  BEGIN
    -- Reset
    IF (nreset = '0') THEN
      data_axi4lite_to_apb4_sample_buf <= (OTHERS => '0');
    ELSIF (clk'EVENT) AND (clk = '1') THEN 
      -- HW:read-write
      data_axi4lite_to_apb4_sample_buf <= data_axi4lite_to_apb4_sample_ip;
    END IF;
  END PROCESS reg_axi4lite_to_apb4_sample_reg_data_axi4lite_to_apb4_sample;

  -- Assign internal buffer value to output
  data_axi4lite_to_apb4_sample <= data_axi4lite_to_apb4_sample_buf;


  ------------------------------------------------------------------------
  --                    READ BUS MULTIPLEXER
  ------------------------------------------------------------------------
  rmux_axi4lite_to_apb4_axi_stat(31 DOWNTO 20) <= DEFAULT_RDATA(31 DOWNTO 20); -- Default read value for un-assigned portion
  rmux_axi4lite_to_apb4_axi_stat(19 DOWNTO 10) <= rd_cnt_axi4lite_to_apb4_axi_stat_buf;
  rmux_axi4lite_to_apb4_axi_stat(9 DOWNTO 0) <= wr_cnt_axi4lite_to_apb4_axi_stat_buf;

  rmux_axi4lite_to_apb4_apb_stat(31 DOWNTO 20) <= DEFAULT_RDATA(31 DOWNTO 20); -- Default read value for un-assigned portion
  rmux_axi4lite_to_apb4_apb_stat(19 DOWNTO 10) <= rd_cnt_axi4lite_to_apb4_apb_stat_buf;
  rmux_axi4lite_to_apb4_apb_stat(9 DOWNTO 0) <= wr_cnt_axi4lite_to_apb4_apb_stat_buf;

  rmux_axi4lite_to_apb4_slv_config(31 DOWNTO 1) <= DEFAULT_RDATA(31 DOWNTO 1); -- Default read value for un-assigned portion
  rmux_axi4lite_to_apb4_slv_config(0) <= use_merr_resp_axi4lite_to_apb4_slv_config_buf;

  rmux_axi4lite_to_apb4_mst_config(31 DOWNTO 3) <= DEFAULT_RDATA(31 DOWNTO 3); -- Default read value for un-assigned portion
  rmux_axi4lite_to_apb4_mst_config(2 DOWNTO 0) <= wr_rd_ratio_axi4lite_to_apb4_mst_config_buf;

  rmux_axi4lite_to_apb4_sample_config(15 DOWNTO 0) <= DEFAULT_RDATA(15 DOWNTO 0); -- Default read value for un-assigned portion
  rmux_axi4lite_to_apb4_sample_config(31) <= waddr_nd_axi4lite_to_apb4_sample_config_buf;
  rmux_axi4lite_to_apb4_sample_config(30) <= waddr_ni_axi4lite_to_apb4_sample_config_buf;
  rmux_axi4lite_to_apb4_sample_config(29) <= waddr_pd_axi4lite_to_apb4_sample_config_buf;
  rmux_axi4lite_to_apb4_sample_config(28) <= waddr_pi_axi4lite_to_apb4_sample_config_buf;
  rmux_axi4lite_to_apb4_sample_config(27) <= wdata_nd_axi4lite_to_apb4_sample_config_buf;
  rmux_axi4lite_to_apb4_sample_config(26) <= wdata_ni_axi4lite_to_apb4_sample_config_buf;
  rmux_axi4lite_to_apb4_sample_config(25) <= wdata_pd_axi4lite_to_apb4_sample_config_buf;
  rmux_axi4lite_to_apb4_sample_config(24) <= wdata_pi_axi4lite_to_apb4_sample_config_buf;
  rmux_axi4lite_to_apb4_sample_config(23) <= raddr_nd_axi4lite_to_apb4_sample_config_buf;
  rmux_axi4lite_to_apb4_sample_config(22) <= raddr_ni_axi4lite_to_apb4_sample_config_buf;
  rmux_axi4lite_to_apb4_sample_config(21) <= raddr_pd_axi4lite_to_apb4_sample_config_buf;
  rmux_axi4lite_to_apb4_sample_config(20) <= raddr_pi_axi4lite_to_apb4_sample_config_buf;
  rmux_axi4lite_to_apb4_sample_config(19) <= rdata_nd_axi4lite_to_apb4_sample_config_buf;
  rmux_axi4lite_to_apb4_sample_config(18) <= rdata_ni_axi4lite_to_apb4_sample_config_buf;
  rmux_axi4lite_to_apb4_sample_config(17) <= rdata_pd_axi4lite_to_apb4_sample_config_buf;
  rmux_axi4lite_to_apb4_sample_config(16) <= rdata_pi_axi4lite_to_apb4_sample_config_buf;

  rmux_axi4lite_to_apb4_sample <= data_axi4lite_to_apb4_sample_buf;

  -- PUT REGISTER VALUE ON READ DATA BUS
  read_bus_mux : PROCESS (rstrobe,
                          raddr,
                          rmux_axi4lite_to_apb4_axi_stat,
                          rmux_axi4lite_to_apb4_apb_stat,
                          rmux_axi4lite_to_apb4_slv_config,
                          rmux_axi4lite_to_apb4_mst_config,
                          rmux_axi4lite_to_apb4_sample_config,
                          rmux_axi4lite_to_apb4_sample)
  BEGIN
    ren_axi4lite_to_apb4_axi_stat <= '0';
    ren_axi4lite_to_apb4_apb_stat <= '0';
    rack <= '0';
    raddrerr <= '0';
    IF (rstrobe = '1') THEN
      CASE raddr IS 
        WHEN AXI4LITE_TO_APB4_AXI_STAT_ADDR => 
          rdata <= rmux_axi4lite_to_apb4_axi_stat;
          ren_axi4lite_to_apb4_axi_stat <= '1';
        WHEN AXI4LITE_TO_APB4_APB_STAT_ADDR => 
          rdata <= rmux_axi4lite_to_apb4_apb_stat;
          ren_axi4lite_to_apb4_apb_stat <= '1';
        WHEN AXI4LITE_TO_APB4_SLV_CONFIG_ADDR => 
          rdata <= rmux_axi4lite_to_apb4_slv_config;
        WHEN AXI4LITE_TO_APB4_MST_CONFIG_ADDR => 
          rdata <= rmux_axi4lite_to_apb4_mst_config;
        WHEN AXI4LITE_TO_APB4_SAMPLE_CONFIG_ADDR => 
          rdata <= rmux_axi4lite_to_apb4_sample_config;
        WHEN AXI4LITE_TO_APB4_SAMPLE_ADDR => 
          rdata <= rmux_axi4lite_to_apb4_sample;
        WHEN OTHERS =>  
          rdata <= DEFAULT_RDATA;
          raddrerr <= '1';
      END CASE;
      rack <= '1';
    ELSE
      rdata <= DEFAULT_RDATA;
    END IF;
  END PROCESS read_bus_mux;
END ARCHITECTURE axi4lite_to_apb4_registers_arch;
